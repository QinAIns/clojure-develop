EVP_DigestInit(3)                   OpenSSL                  EVP_DigestInit(3)



NNAAMMEE
       EVP_MD_CTX_init, EVP_MD_CTX_create, EVP_DigestInit_ex, EVP_DigestUp-
       date, EVP_DigestFinal_ex, EVP_MD_CTX_cleanup, EVP_MD_CTX_destroy,
       EVP_MAX_MD_SIZE, EVP_MD_CTX_copy_ex, EVP_MD_CTX_copy, EVP_MD_type,
       EVP_MD_pkey_type, EVP_MD_size, EVP_MD_block_size, EVP_MD_CTX_md,
       EVP_MD_CTX_size, EVP_MD_CTX_block_size, EVP_MD_CTX_type, EVP_md_null,
       EVP_md2, EVP_md5, EVP_sha, EVP_sha1, EVP_dss, EVP_dss1, EVP_mdc2,
       EVP_ripemd160, EVP_get_digestbyname, EVP_get_digestbynid,
       EVP_get_digestbyobj - EVP digest routines

SSYYNNOOPPSSIISS
        #include <openssl/evp.h>

        void EVP_MD_CTX_init(EVP_MD_CTX *ctx);
        EVP_MD_CTX *EVP_MD_CTX_create(void);

        int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl);
        int EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *d, size_t cnt);
        int EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned char *md,
               unsigned int *s);

        int EVP_MD_CTX_cleanup(EVP_MD_CTX *ctx);
        void EVP_MD_CTX_destroy(EVP_MD_CTX *ctx);

        int EVP_MD_CTX_copy_ex(EVP_MD_CTX *out,const EVP_MD_CTX *in);

        int EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type);
        int EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned char *md,
               unsigned int *s);

        int EVP_MD_CTX_copy(EVP_MD_CTX *out,EVP_MD_CTX *in);

        #define EVP_MAX_MD_SIZE (16+20) /* The SSLv3 md5+sha1 type */

        #define EVP_MD_type(e)                 ((e)->type)
        #define EVP_MD_pkey_type(e)            ((e)->pkey_type)
        #define EVP_MD_size(e)                 ((e)->md_size)
        #define EVP_MD_block_size(e)           ((e)->block_size)

        #define EVP_MD_CTX_md(e)               (e)->digest)
        #define EVP_MD_CTX_size(e)             EVP_MD_size((e)->digest)
        #define EVP_MD_CTX_block_size(e)       EVP_MD_block_size((e)->digest)
        #define EVP_MD_CTX_type(e)             EVP_MD_type((e)->digest)

        const EVP_MD *EVP_md_null(void);
        const EVP_MD *EVP_md2(void);
        const EVP_MD *EVP_md5(void);
        const EVP_MD *EVP_sha(void);
        const EVP_MD *EVP_sha1(void);
        const EVP_MD *EVP_dss(void);
        const EVP_MD *EVP_dss1(void);
        const EVP_MD *EVP_mdc2(void);
        const EVP_MD *EVP_ripemd160(void);

        const EVP_MD *EVP_get_digestbyname(const char *name);
        #define EVP_get_digestbynid(a) EVP_get_digestbyname(OBJ_nid2sn(a))
        #define EVP_get_digestbyobj(a) EVP_get_digestbynid(OBJ_obj2nid(a))

DDEESSCCRRIIPPTTIIOONN
       The EVP digest routines are a high level interface to message digests.

       _E_V_P___M_D___C_T_X___i_n_i_t_(_) initializes digest context ccttxx.

       _E_V_P___M_D___C_T_X___c_r_e_a_t_e_(_) allocates, initializes and returns a digest con-
       text.

       _E_V_P___D_i_g_e_s_t_I_n_i_t___e_x_(_) sets up digest context ccttxx to use a digest ttyyppee
       from ENGINE iimmppll. ccttxx must be initialized before calling this function.
       ttyyppee will typically be supplied by a functionsuch as _E_V_P___s_h_a_1_(_).  If
       iimmppll is NULL then the default implementation of digest ttyyppee is used.

       _E_V_P___D_i_g_e_s_t_U_p_d_a_t_e_(_) hashes ccnntt bytes of data at dd into the digest con-
       text ccttxx. This function can be called several times on the same ccttxx to
       hash additional data.

       _E_V_P___D_i_g_e_s_t_F_i_n_a_l___e_x_(_) retrieves the digest value from ccttxx and places it
       in mmdd. If the ss parameter is not NULL then the number of bytes of data
       written (i.e. the length of the digest) will be written to the integer
       at ss, at most EEVVPP__MMAAXX__MMDD__SSIIZZEE bytes will be written.  After calling
       _E_V_P___D_i_g_e_s_t_F_i_n_a_l___e_x_(_) no additional calls to _E_V_P___D_i_g_e_s_t_U_p_d_a_t_e_(_) can be
       made, but _E_V_P___D_i_g_e_s_t_I_n_i_t___e_x_(_) can be called to initialize a new digest
       operation.

       _E_V_P___M_D___C_T_X___c_l_e_a_n_u_p_(_) cleans up digest context ccttxx, it should be called
       after a digest context is no longer needed.

       _E_V_P___M_D___C_T_X___d_e_s_t_r_o_y_(_) cleans up digest context ccttxx and frees up the
       space allocated to it, it should be called only on a context created
       using _E_V_P___M_D___C_T_X___c_r_e_a_t_e_(_).

       _E_V_P___M_D___C_T_X___c_o_p_y___e_x_(_) can be used to copy the message digest state from
       iinn to oouutt. This is useful if large amounts of data are to be hashed
       which only differ in the last few bytes. oouutt must be initialized before
       calling this function.

       _E_V_P___D_i_g_e_s_t_I_n_i_t_(_) behaves in the same way as _E_V_P___D_i_g_e_s_t_I_n_i_t___e_x_(_) except
       the passed context ccttxx does not have to be initialized, and it always
       uses the default digest implementation.

       _E_V_P___D_i_g_e_s_t_F_i_n_a_l_(_) is similar to _E_V_P___D_i_g_e_s_t_F_i_n_a_l___e_x_(_) except the digest
       context ccttxx is automatically cleaned up.

       _E_V_P___M_D___C_T_X___c_o_p_y_(_) is similar to _E_V_P___M_D___C_T_X___c_o_p_y___e_x_(_) except the desti-
       nation oouutt does not have to be initialized.

       _E_V_P___M_D___s_i_z_e_(_) and _E_V_P___M_D___C_T_X___s_i_z_e_(_) return the size of the message
       digest when passed an EEVVPP__MMDD or an EEVVPP__MMDD__CCTTXX structure, i.e. the size
       of the hash.

       _E_V_P___M_D___b_l_o_c_k___s_i_z_e_(_) and _E_V_P___M_D___C_T_X___b_l_o_c_k___s_i_z_e_(_) return the block size
       of the message digest when passed an EEVVPP__MMDD or an EEVVPP__MMDD__CCTTXX structure.

       _E_V_P___M_D___t_y_p_e_(_) and _E_V_P___M_D___C_T_X___t_y_p_e_(_) return the NID of the OBJECT IDEN-
       TIFIER representing the given message digest when passed an EEVVPP__MMDD
       structure.  For example EVP_MD_type(_E_V_P___s_h_a_1_(_)) returns NNIIDD__sshhaa11. This
       function is normally used when setting ASN1 OIDs.

       _E_V_P___M_D___C_T_X___m_d_(_) returns the EEVVPP__MMDD structure corresponding to the
       passed EEVVPP__MMDD__CCTTXX.

       _E_V_P___M_D___p_k_e_y___t_y_p_e_(_) returns the NID of the public key signing algorithm
       associated with this digest. For example _E_V_P___s_h_a_1_(_) is associated with
       RSA so this will return NNIIDD__sshhaa11WWiitthhRRSSAAEEnnccrryyppttiioonn. This "link" between
       digests and signature algorithms may not be retained in future versions
       of OpenSSL.

       _E_V_P___m_d_2_(_), _E_V_P___m_d_5_(_), _E_V_P___s_h_a_(_), _E_V_P___s_h_a_1_(_), _E_V_P___m_d_c_2_(_) and
       _E_V_P___r_i_p_e_m_d_1_6_0_(_) return EEVVPP__MMDD structures for the MD2, MD5, SHA, SHA1,
       MDC2 and RIPEMD160 digest algorithms respectively. The associated sig-
       nature algorithm is RSA in each case.

       _E_V_P___d_s_s_(_) and _E_V_P___d_s_s_1_(_) return EEVVPP__MMDD structures for SHA and SHA1
       digest algorithms but using DSS (DSA) for the signature algorithm.
       Note: there is no need to use these pseudo-digests in OpenSSL 1.0.0 and
       later, they are however retained for compatibility.

       _E_V_P___m_d___n_u_l_l_(_) is a "null" message digest that does nothing: i.e. the
       hash it returns is of zero length.

       _E_V_P___g_e_t___d_i_g_e_s_t_b_y_n_a_m_e_(_), _E_V_P___g_e_t___d_i_g_e_s_t_b_y_n_i_d_(_) and _E_V_P___g_e_t___d_i_g_e_s_t_b_y_o_b_j_(_)
       return an EEVVPP__MMDD structure when passed a digest name, a digest NID or
       an ASN1_OBJECT structure respectively. The digest table must be ini-
       tialized using, for example, _O_p_e_n_S_S_L___a_d_d___a_l_l___d_i_g_e_s_t_s_(_) for these func-
       tions to work.

RREETTUURRNN VVAALLUUEESS
       _E_V_P___D_i_g_e_s_t_I_n_i_t___e_x_(_), _E_V_P___D_i_g_e_s_t_U_p_d_a_t_e_(_) and _E_V_P___D_i_g_e_s_t_F_i_n_a_l___e_x_(_) return
       1 for success and 0 for failure.

       _E_V_P___M_D___C_T_X___c_o_p_y___e_x_(_) returns 1 if successful or 0 for failure.

       _E_V_P___M_D___t_y_p_e_(_), _E_V_P___M_D___p_k_e_y___t_y_p_e_(_) and _E_V_P___M_D___t_y_p_e_(_) return the NID of
       the corresponding OBJECT IDENTIFIER or NID_undef if none exists.

       _E_V_P___M_D___s_i_z_e_(_), _E_V_P___M_D___b_l_o_c_k___s_i_z_e_(_), EVP_MD_CTX_size(e), _E_V_P___M_D___s_i_z_e_(_),
       _E_V_P___M_D___C_T_X___b_l_o_c_k___s_i_z_e_(_)  and _E_V_P___M_D___b_l_o_c_k___s_i_z_e_(_) return the digest or
       block size in bytes.

       _E_V_P___m_d___n_u_l_l_(_), _E_V_P___m_d_2_(_), _E_V_P___m_d_5_(_), _E_V_P___s_h_a_(_), _E_V_P___s_h_a_1_(_), _E_V_P___d_s_s_(_),
       _E_V_P___d_s_s_1_(_), _E_V_P___m_d_c_2_(_) and _E_V_P___r_i_p_e_m_d_1_6_0_(_) return pointers to the cor-
       responding EVP_MD structures.

       _E_V_P___g_e_t___d_i_g_e_s_t_b_y_n_a_m_e_(_), _E_V_P___g_e_t___d_i_g_e_s_t_b_y_n_i_d_(_) and _E_V_P___g_e_t___d_i_g_e_s_t_b_y_o_b_j_(_)
       return either an EEVVPP__MMDD structure or NULL if an error occurs.

NNOOTTEESS
       The EEVVPP interface to message digests should almost always be used in
       preference to the low level interfaces. This is because the code then
       becomes transparent to the digest used and much more flexible.

       SHA1 is the digest of choice for new applications. The other digest
       algorithms are still in common use.

       For most applications the iimmppll parameter to _E_V_P___D_i_g_e_s_t_I_n_i_t___e_x_(_) will be
       set to NULL to use the default digest implementation.

       The functions _E_V_P___D_i_g_e_s_t_I_n_i_t_(_), _E_V_P___D_i_g_e_s_t_F_i_n_a_l_(_) and _E_V_P___M_D___C_T_X___c_o_p_y_(_)
       are obsolete but are retained to maintain compatibility with existing
       code. New applications should use _E_V_P___D_i_g_e_s_t_I_n_i_t___e_x_(_), _E_V_P___D_i_g_e_s_t_F_i_-
       _n_a_l___e_x_(_) and _E_V_P___M_D___C_T_X___c_o_p_y___e_x_(_) because they can efficiently reuse a
       digest context instead of initializing and cleaning it up on each call
       and allow non default implementations of digests to be specified.

       In OpenSSL 0.9.7 and later if digest contexts are not cleaned up after
       use memory leaks will occur.

EEXXAAMMPPLLEE
       This example digests the data "Test Message\n" and "Hello World\n",
       using the digest name passed on the command line.

        #include <stdio.h>
        #include <openssl/evp.h>

        main(int argc, char *argv[])
        {
        EVP_MD_CTX mdctx;
        const EVP_MD *md;
        char mess1[] = "Test Message\n";
        char mess2[] = "Hello World\n";
        unsigned char md_value[EVP_MAX_MD_SIZE];
        int md_len, i;

        OpenSSL_add_all_digests();

        if(!argv[1]) {
               printf("Usage: mdtest digestname\n");
               exit(1);
        }

        md = EVP_get_digestbyname(argv[1]);

        if(!md) {
               printf("Unknown message digest %s\n", argv[1]);
               exit(1);
        }

        EVP_MD_CTX_init(&mdctx);
        EVP_DigestInit_ex(&mdctx, md, NULL);
        EVP_DigestUpdate(&mdctx, mess1, strlen(mess1));
        EVP_DigestUpdate(&mdctx, mess2, strlen(mess2));
        EVP_DigestFinal_ex(&mdctx, md_value, &md_len);
        EVP_MD_CTX_cleanup(&mdctx);

        printf("Digest is: ");
        for(i = 0; i < md_len; i++) printf("%02x", md_value[i]);
        printf("\n");
        }

SSEEEE AALLSSOO
       _e_v_p(3), _h_m_a_c(3), _m_d_2(3), _m_d_5(3), _m_d_c_2(3), _r_i_p_e_m_d(3), _s_h_a(3), _d_g_s_t(1)

HHIISSTTOORRYY
       _E_V_P___D_i_g_e_s_t_I_n_i_t_(_), _E_V_P___D_i_g_e_s_t_U_p_d_a_t_e_(_) and _E_V_P___D_i_g_e_s_t_F_i_n_a_l_(_) are avail-
       able in all versions of SSLeay and OpenSSL.

       _E_V_P___M_D___C_T_X___i_n_i_t_(_), _E_V_P___M_D___C_T_X___c_r_e_a_t_e_(_), _E_V_P___M_D___C_T_X___c_o_p_y___e_x_(_),
       _E_V_P___M_D___C_T_X___c_l_e_a_n_u_p_(_), _E_V_P___M_D___C_T_X___d_e_s_t_r_o_y_(_), _E_V_P___D_i_g_e_s_t_I_n_i_t___e_x_(_) and
       _E_V_P___D_i_g_e_s_t_F_i_n_a_l___e_x_(_) were added in OpenSSL 0.9.7.

       _E_V_P___m_d___n_u_l_l_(_), _E_V_P___m_d_2_(_), _E_V_P___m_d_5_(_), _E_V_P___s_h_a_(_), _E_V_P___s_h_a_1_(_), _E_V_P___d_s_s_(_),
       _E_V_P___d_s_s_1_(_), _E_V_P___m_d_c_2_(_) and _E_V_P___r_i_p_e_m_d_1_6_0_(_) were changed to return tru-
       ely const EVP_MD * in OpenSSL 0.9.7.

       The link between digests and signing algorithms was fixed in OpenSSL
       1.0 and later, so now _E_V_P___s_h_a_1_(_) can be used with RSA and DSA, there is
       no need to use _E_V_P___d_s_s_1_(_) any more.

       OpenSSL 1.0 and later does not include the MD2 digest algorithm in the
       default configuration due to its security weaknesses.



1.0.0g                            2009-10-16                 EVP_DigestInit(3)
