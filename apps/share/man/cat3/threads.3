threads(3)                          OpenSSL                         threads(3)



NNAAMMEE
       CRYPTO_THREADID_set_callback, CRYPTO_THREADID_get_callback,
       CRYPTO_THREADID_current, CRYPTO_THREADID_cmp, CRYPTO_THREADID_cpy,
       CRYPTO_THREADID_hash, CRYPTO_set_locking_callback, CRYPTO_num_locks,
       CRYPTO_set_dynlock_create_callback, CRYPTO_set_dynlock_lock_callback,
       CRYPTO_set_dynlock_destroy_callback, CRYPTO_get_new_dynlockid,
       CRYPTO_destroy_dynlockid, CRYPTO_lock - OpenSSL thread support

SSYYNNOOPPSSIISS
        #include <openssl/crypto.h>

        /* Don't use this structure directly. */
        typedef struct crypto_threadid_st
                {
                void *ptr;
                unsigned long val;
                } CRYPTO_THREADID;
        /* Only use CRYPTO_THREADID_set_[numeric|pointer]() within callbacks */
        void CRYPTO_THREADID_set_numeric(CRYPTO_THREADID *id, unsigned long val);
        void CRYPTO_THREADID_set_pointer(CRYPTO_THREADID *id, void *ptr);
        int CRYPTO_THREADID_set_callback(void (*threadid_func)(CRYPTO_THREADID *));
        void (*CRYPTO_THREADID_get_callback(void))(CRYPTO_THREADID *);
        void CRYPTO_THREADID_current(CRYPTO_THREADID *id);
        int CRYPTO_THREADID_cmp(const CRYPTO_THREADID *a,
                                const CRYPTO_THREADID *b);
        void CRYPTO_THREADID_cpy(CRYPTO_THREADID *dest,
                                 const CRYPTO_THREADID *src);
        unsigned long CRYPTO_THREADID_hash(const CRYPTO_THREADID *id);

        int CRYPTO_num_locks(void);

        /* struct CRYPTO_dynlock_value needs to be defined by the user */
        struct CRYPTO_dynlock_value;

        void CRYPTO_set_dynlock_create_callback(struct CRYPTO_dynlock_value *
               (*dyn_create_function)(char *file, int line));
        void CRYPTO_set_dynlock_lock_callback(void (*dyn_lock_function)
               (int mode, struct CRYPTO_dynlock_value *l,
               const char *file, int line));
        void CRYPTO_set_dynlock_destroy_callback(void (*dyn_destroy_function)
               (struct CRYPTO_dynlock_value *l, const char *file, int line));

        int CRYPTO_get_new_dynlockid(void);

        void CRYPTO_destroy_dynlockid(int i);

        void CRYPTO_lock(int mode, int n, const char *file, int line);

        #define CRYPTO_w_lock(type)    \
               CRYPTO_lock(CRYPTO_LOCK|CRYPTO_WRITE,type,__FILE__,__LINE__)
        #define CRYPTO_w_unlock(type)  \
               CRYPTO_lock(CRYPTO_UNLOCK|CRYPTO_WRITE,type,__FILE__,__LINE__)
        #define CRYPTO_r_lock(type)    \
               CRYPTO_lock(CRYPTO_LOCK|CRYPTO_READ,type,__FILE__,__LINE__)
        #define CRYPTO_r_unlock(type)  \
               CRYPTO_lock(CRYPTO_UNLOCK|CRYPTO_READ,type,__FILE__,__LINE__)
        #define CRYPTO_add(addr,amount,type)   \
               CRYPTO_add_lock(addr,amount,type,__FILE__,__LINE__)

DDEESSCCRRIIPPTTIIOONN
       OpenSSL can safely be used in multi-threaded applications provided that
       at least two callback functions are set, locking_function and threa-
       did_func.

       locking_function(int mode, int n, const char *file, int line) is needed
       to perform locking on shared data structures.  (Note that OpenSSL uses
       a number of global data structures that will be implicitly shared when-
       ever multiple threads use OpenSSL.)  Multi-threaded applications will
       crash at random if it is not set.

       _l_o_c_k_i_n_g___f_u_n_c_t_i_o_n_(_) must be able to handle up to _C_R_Y_P_T_O___n_u_m___l_o_c_k_s_(_) dif-
       ferent mutex locks. It sets the nn-th lock if mmooddee & CCRRYYPPTTOO__LLOOCCKK, and
       releases it otherwise.

       ffiillee and lliinnee are the file number of the function setting the lock.
       They can be useful for debugging.

       threadid_func(CRYPTO_THREADID *id) is needed to record the currently-
       executing thread's identifier into iidd. The implementation of this call-
       back should not fill in iidd directly, but should use _C_R_Y_P_T_O___T_H_R_E_A_-
       _D_I_D___s_e_t___n_u_m_e_r_i_c_(_) if thread IDs are numeric, or _C_R_Y_P_T_O___T_H_R_E_A_-
       _D_I_D___s_e_t___p_o_i_n_t_e_r_(_) if they are pointer-based.  If the application does
       not register such a callback using _C_R_Y_P_T_O___T_H_R_E_A_D_I_D___s_e_t___c_a_l_l_b_a_c_k_(_), then
       a default implementation is used - on Windows and BeOS this uses the
       system's default thread identifying APIs, and on all other platforms it
       uses the address of eerrrrnnoo. The latter is satisfactory for thread-safety
       if and only if the platform has a thread-local error number facility.

       Once _t_h_r_e_a_d_i_d___f_u_n_c_(_) is registered, or if the built-in default imple-
       mentation is to be used;

       * _C_R_Y_P_T_O___T_H_R_E_A_D_I_D___c_u_r_r_e_n_t_(_) records the currently-executing thread ID
       into the given iidd object.
       * _C_R_Y_P_T_O___T_H_R_E_A_D_I_D___c_m_p_(_) compares two thread IDs (returning zero for
       equality, ie. the same semantics as _m_e_m_c_m_p_(_)).
       * _C_R_Y_P_T_O___T_H_R_E_A_D_I_D___c_p_y_(_) duplicates a thread ID value,
       * _C_R_Y_P_T_O___T_H_R_E_A_D_I_D___h_a_s_h_(_) returns a numeric value usable as a hash-table
       key. This is usually the exact numeric or pointer-based thread ID used
       internally, however this also handles the unusual case where pointers
       are larger than 'long' variables and the platform's thread IDs are
       pointer-based - in this case, mixing is done to attempt to produce a
       unique numeric value even though it is not as wide as the platform's
       true thread IDs.

       Additionally, OpenSSL supports dynamic locks, and sometimes, some parts
       of OpenSSL need it for better performance.  To enable this, the follow-
       ing is required:

       * Three additional callback function, dyn_create_function,
       dyn_lock_function and dyn_destroy_function.
       * A structure defined with the data that each lock needs to handle.

       struct CRYPTO_dynlock_value has to be defined to contain whatever
       structure is needed to handle locks.

       dyn_create_function(const char *file, int line) is needed to create a
       lock.  Multi-threaded applications might crash at random if it is not
       set.

       dyn_lock_function(int mode, CRYPTO_dynlock *l, const char *file, int
       line) is needed to perform locking off dynamic lock numbered n. Multi-
       threaded applications might crash at random if it is not set.

       dyn_destroy_function(CRYPTO_dynlock *l, const char *file, int line) is
       needed to destroy the lock l. Multi-threaded applications might crash
       at random if it is not set.

       _C_R_Y_P_T_O___g_e_t___n_e_w___d_y_n_l_o_c_k_i_d_(_) is used to create locks.  It will call
       dyn_create_function for the actual creation.

       _C_R_Y_P_T_O___d_e_s_t_r_o_y___d_y_n_l_o_c_k_i_d_(_) is used to destroy locks.  It will call
       dyn_destroy_function for the actual destruction.

       _C_R_Y_P_T_O___l_o_c_k_(_) is used to lock and unlock the locks.  mode is a bitfield
       describing what should be done with the lock.  n is the number of the
       lock as returned from _C_R_Y_P_T_O___g_e_t___n_e_w___d_y_n_l_o_c_k_i_d_(_).  mode can be combined
       from the following values.  These values are pairwise exclusive, with
       undefined behaviour if misused (for example, CRYPTO_READ and
       CRYPTO_WRITE should not be used together):

               CRYPTO_LOCK     0x01
               CRYPTO_UNLOCK   0x02
               CRYPTO_READ     0x04
               CRYPTO_WRITE    0x08

RREETTUURRNN VVAALLUUEESS
       _C_R_Y_P_T_O___n_u_m___l_o_c_k_s_(_) returns the required number of locks.

       _C_R_Y_P_T_O___g_e_t___n_e_w___d_y_n_l_o_c_k_i_d_(_) returns the index to the newly created lock.

       The other functions return no values.

NNOOTTEESS
       You can find out if OpenSSL was configured with thread support:

        #define OPENSSL_THREAD_DEFINES
        #include <openssl/opensslconf.h>
        #if defined(OPENSSL_THREADS)
          // thread support enabled
        #else
          // no thread support
        #endif

       Also, dynamic locks are currently not used internally by OpenSSL, but
       may do so in the future.

EEXXAAMMPPLLEESS
       ccrryyppttoo//tthhrreeaaddss//mmtttteesstt..cc shows examples of the callback functions on
       Solaris, Irix and Win32.

HHIISSTTOORRYY
       _C_R_Y_P_T_O___s_e_t___l_o_c_k_i_n_g___c_a_l_l_b_a_c_k_(_) is available in all versions of SSLeay
       and OpenSSL.  _C_R_Y_P_T_O___n_u_m___l_o_c_k_s_(_) was added in OpenSSL 0.9.4.  All func-
       tions dealing with dynamic locks were added in OpenSSL 0.9.5b-dev.
       CCRRYYPPTTOO__TTHHRREEAADDIIDD and associated functions were introduced in OpenSSL
       1.0.0 to replace (actually, deprecate) the previous _C_R_Y_P_T_O___s_e_t___i_d___c_a_l_l_-
       _b_a_c_k_(_), _C_R_Y_P_T_O___g_e_t___i_d___c_a_l_l_b_a_c_k_(_), and _C_R_Y_P_T_O___t_h_r_e_a_d___i_d_(_) functions
       which assumed thread IDs to always be represented by 'unsigned long'.

SSEEEE AALLSSOO
       _c_r_y_p_t_o(3)



1.0.0g                            2009-10-01                        threads(3)
