BN_mod_mul_montgomery(3)            OpenSSL           BN_mod_mul_montgomery(3)



NNAAMMEE
       BN_mod_mul_montgomery, BN_MONT_CTX_new, BN_MONT_CTX_init,
       BN_MONT_CTX_free, BN_MONT_CTX_set, BN_MONT_CTX_copy, BN_from_mont-
       gomery, BN_to_montgomery - Montgomery multiplication

SSYYNNOOPPSSIISS
        #include <openssl/bn.h>

        BN_MONT_CTX *BN_MONT_CTX_new(void);
        void BN_MONT_CTX_init(BN_MONT_CTX *ctx);
        void BN_MONT_CTX_free(BN_MONT_CTX *mont);

        int BN_MONT_CTX_set(BN_MONT_CTX *mont, const BIGNUM *m, BN_CTX *ctx);
        BN_MONT_CTX *BN_MONT_CTX_copy(BN_MONT_CTX *to, BN_MONT_CTX *from);

        int BN_mod_mul_montgomery(BIGNUM *r, BIGNUM *a, BIGNUM *b,
                BN_MONT_CTX *mont, BN_CTX *ctx);

        int BN_from_montgomery(BIGNUM *r, BIGNUM *a, BN_MONT_CTX *mont,
                BN_CTX *ctx);

        int BN_to_montgomery(BIGNUM *r, BIGNUM *a, BN_MONT_CTX *mont,
                BN_CTX *ctx);

DDEESSCCRRIIPPTTIIOONN
       These functions implement Montgomery multiplication. They are used
       automatically when _B_N___m_o_d___e_x_p(3) is called with suitable input, but
       they may be useful when several operations are to be performed using
       the same modulus.

       _B_N___M_O_N_T___C_T_X___n_e_w_(_) allocates and initializes a BBNN__MMOONNTT__CCTTXX structure.
       _B_N___M_O_N_T___C_T_X___i_n_i_t_(_) initializes an existing uninitialized BBNN__MMOONNTT__CCTTXX.

       _B_N___M_O_N_T___C_T_X___s_e_t_(_) sets up the _m_o_n_t structure from the modulus _m by pre-
       computing its inverse and a value R.

       _B_N___M_O_N_T___C_T_X___c_o_p_y_(_) copies the BBNN__MMOONNTT__CCTTXX _f_r_o_m to _t_o.

       _B_N___M_O_N_T___C_T_X___f_r_e_e_(_) frees the components of the BBNN__MMOONNTT__CCTTXX, and, if it
       was created by _B_N___M_O_N_T___C_T_X___n_e_w_(_), also the structure itself.

       _B_N___m_o_d___m_u_l___m_o_n_t_g_o_m_e_r_y_(_) computes Mont(_a,_b):=_a*_b*R^-1 and places the
       result in _r.

       _B_N___f_r_o_m___m_o_n_t_g_o_m_e_r_y_(_) performs the Montgomery reduction _r = _a*R^-1.

       _B_N___t_o___m_o_n_t_g_o_m_e_r_y_(_) computes Mont(_a,R^2), i.e. _a*R.  Note that _a must be
       non-negative and smaller than the modulus.

       For all functions, _c_t_x is a previously allocated BBNN__CCTTXX used for tempo-
       rary variables.

       The BBNN__MMOONNTT__CCTTXX structure is defined as follows:

        typedef struct bn_mont_ctx_st
               {
               int ri;         /* number of bits in R */
               BIGNUM RR;      /* R^2 (used to convert to Montgomery form) */
               BIGNUM N;       /* The modulus */
               BIGNUM Ni;      /* R*(1/R mod N) - N*Ni = 1
                                * (Ni is only stored for bignum algorithm) */
               BN_ULONG n0;    /* least significant word of Ni */
               int flags;
               } BN_MONT_CTX;

       _B_N___t_o___m_o_n_t_g_o_m_e_r_y_(_) is a macro.

RREETTUURRNN VVAALLUUEESS
       _B_N___M_O_N_T___C_T_X___n_e_w_(_) returns the newly allocated BBNN__MMOONNTT__CCTTXX, and NULL on
       error.

       _B_N___M_O_N_T___C_T_X___i_n_i_t_(_) and _B_N___M_O_N_T___C_T_X___f_r_e_e_(_) have no return values.

       For the other functions, 1 is returned for success, 0 on error.  The
       error codes can be obtained by _E_R_R___g_e_t___e_r_r_o_r(3).

WWAARRNNIINNGG
       The inputs must be reduced modulo mm, otherwise the result will be out-
       side the expected range.

SSEEEE AALLSSOO
       _b_n(3), _E_R_R___g_e_t___e_r_r_o_r(3), _B_N___a_d_d(3), _B_N___C_T_X___n_e_w(3)

HHIISSTTOORRYY
       _B_N___M_O_N_T___C_T_X___n_e_w_(_), _B_N___M_O_N_T___C_T_X___f_r_e_e_(_), _B_N___M_O_N_T___C_T_X___s_e_t_(_),
       _B_N___m_o_d___m_u_l___m_o_n_t_g_o_m_e_r_y_(_), _B_N___f_r_o_m___m_o_n_t_g_o_m_e_r_y_(_) and _B_N___t_o___m_o_n_t_g_o_m_e_r_y_(_)
       are available in all versions of SSLeay and OpenSSL.

       _B_N___M_O_N_T___C_T_X___i_n_i_t_(_) and _B_N___M_O_N_T___C_T_X___c_o_p_y_(_) were added in SSLeay 0.9.1b.



1.0.0g                            2002-09-25          BN_mod_mul_montgomery(3)
