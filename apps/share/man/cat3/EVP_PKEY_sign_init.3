EVP_PKEY_sign(3)                    OpenSSL                   EVP_PKEY_sign(3)



NNAAMMEE
       EVP_PKEY_sign_init, EVP_PKEY_sign - sign using a public key algorithm

SSYYNNOOPPSSIISS
        #include <openssl/evp.h>

        int EVP_PKEY_sign_init(EVP_PKEY_CTX *ctx);
        int EVP_PKEY_sign(EVP_PKEY_CTX *ctx,
                               unsigned char *sig, size_t *siglen,
                               const unsigned char *tbs, size_t tbslen);

DDEESSCCRRIIPPTTIIOONN
       The _E_V_P___P_K_E_Y___s_i_g_n___i_n_i_t_(_) function initializes a public key algorithm
       context using key ppkkeeyy for a signing operation.

       The _E_V_P___P_K_E_Y___s_i_g_n_(_) function performs a public key signing operation
       using ccttxx. The data to be signed is specified using the ttbbss and ttbbsslleenn
       parameters. If ssiigg is NNUULLLL then the maximum size of the output buffer
       is written to the ssiigglleenn parameter. If ssiigg is not NNUULLLL then before the
       call the ssiigglleenn parameter should contain the length of the ssiigg buffer,
       if the call is successful the signature is written to ssiigg and the
       amount of data written to ssiigglleenn.

NNOOTTEESS
       After the call to _E_V_P___P_K_E_Y___s_i_g_n___i_n_i_t_(_) algorithm specific control oper-
       ations can be performed to set any appropriate parameters for the oper-
       ation.

       The function _E_V_P___P_K_E_Y___s_i_g_n_(_) can be called more than once on the same
       context if several operations are performed using the same parameters.

RREETTUURRNN VVAALLUUEESS
       _E_V_P___P_K_E_Y___s_i_g_n___i_n_i_t_(_) and _E_V_P___P_K_E_Y___s_i_g_n_(_) return 1 for success and 0 or
       a negative value for failure. In particular a return value of -2 indi-
       cates the operation is not supported by the public key algorithm.

EEXXAAMMPPLLEE
       Sign data using RSA with PKCS#1 padding and SHA256 digest:

        #include <openssl/evp.h>
        #include <openssl/rsa.h>

        EVP_PKEY_CTX *ctx;
        unsigned char *md, *sig;
        size_t mdlen, siglen;
        EVP_PKEY *signing_key;
        /* NB: assumes signing_key, md and mdlen are already set up
         * and that signing_key is an RSA private key
         */
        ctx = EVP_PKEY_CTX_new(signing_key);
        if (!ctx)
               /* Error occurred */
        if (EVP_PKEY_sign_init(ctx) <= 0)
               /* Error */
        if (EVP_PKEY_CTX_set_rsa_padding(ctx, RSA_PKCS1_PADDING) <= 0)
               /* Error */
        if (EVP_PKEY_CTX_set_signature_md(ctx, EVP_sha256()) <= 0)
               /* Error */

        /* Determine buffer length */
        if (EVP_PKEY_sign(ctx, NULL, &siglen, md, mdlen) <= 0)
               /* Error */

        sig = OPENSSL_malloc(siglen);

        if (!sig)
               /* malloc failure */

        if (EVP_PKEY_sign(ctx, sig, &siglen, md, mdlen) <= 0)
               /* Error */

        /* Signature is siglen bytes written to buffer sig */

SSEEEE AALLSSOO
       _E_V_P___P_K_E_Y___C_T_X___n_e_w(3), _E_V_P___P_K_E_Y___e_n_c_r_y_p_t(3), _E_V_P___P_K_E_Y___d_e_c_r_y_p_t(3),
       _E_V_P___P_K_E_Y___v_e_r_i_f_y(3), _E_V_P___P_K_E_Y___v_e_r_i_f_y_r_e_c_o_v_e_r(3), _E_V_P___P_K_E_Y___d_e_r_i_v_e(3)

HHIISSTTOORRYY
       These functions were first added to OpenSSL 1.0.0.



1.0.0g                            2009-10-01                  EVP_PKEY_sign(3)
