BIO_f_buffer(3)                     OpenSSL                    BIO_f_buffer(3)



NNAAMMEE
       BIO_f_buffer - buffering BIO

SSYYNNOOPPSSIISS
        #include <openssl/bio.h>

        BIO_METHOD * BIO_f_buffer(void);

        #define BIO_get_buffer_num_lines(b)    BIO_ctrl(b,BIO_C_GET_BUFF_NUM_LINES,0,NULL)
        #define BIO_set_read_buffer_size(b,size) BIO_int_ctrl(b,BIO_C_SET_BUFF_SIZE,size,0)
        #define BIO_set_write_buffer_size(b,size) BIO_int_ctrl(b,BIO_C_SET_BUFF_SIZE,size,1)
        #define BIO_set_buffer_size(b,size)    BIO_ctrl(b,BIO_C_SET_BUFF_SIZE,size,NULL)
        #define BIO_set_buffer_read_data(b,buf,num) BIO_ctrl(b,BIO_C_SET_BUFF_READ_DATA,num,buf)

DDEESSCCRRIIPPTTIIOONN
       _B_I_O___f___b_u_f_f_e_r_(_) returns the buffering BIO method.

       Data written to a buffering BIO is buffered and periodically written to
       the next BIO in the chain. Data read from a buffering BIO comes from an
       internal buffer which is filled from the next BIO in the chain.  Both
       _B_I_O___g_e_t_s_(_) and _B_I_O___p_u_t_s_(_) are supported.

       Calling _B_I_O___r_e_s_e_t_(_) on a buffering BIO clears any buffered data.

       _B_I_O___g_e_t___b_u_f_f_e_r___n_u_m___l_i_n_e_s_(_) returns the number of lines currently
       buffered.

       _B_I_O___s_e_t___r_e_a_d___b_u_f_f_e_r___s_i_z_e_(_), _B_I_O___s_e_t___w_r_i_t_e___b_u_f_f_e_r___s_i_z_e_(_) and
       _B_I_O___s_e_t___b_u_f_f_e_r___s_i_z_e_(_) set the read, write or both read and write buffer
       sizes to ssiizzee. The initial buffer size is DEFAULT_BUFFER_SIZE, cur-
       rently 4096. Any attempt to reduce the buffer size below DEFAULT_BUF-
       FER_SIZE is ignored. Any buffered data is cleared when the buffer is
       resized.

       _B_I_O___s_e_t___b_u_f_f_e_r___r_e_a_d___d_a_t_a_(_) clears the read buffer and fills it with nnuumm
       bytes of bbuuff. If nnuumm is larger than the current buffer size the buffer
       is expanded.

NNOOTTEESS
       Buffering BIOs implement _B_I_O___g_e_t_s_(_) by using _B_I_O___r_e_a_d_(_) operations on
       the next BIO in the chain. By prepending a buffering BIO to a chain it
       is therefore possible to provide _B_I_O___g_e_t_s_(_) functionality if the fol-
       lowing BIOs do not support it (for example SSL BIOs).

       Data is only written to the next BIO in the chain when the write buffer
       fills or when _B_I_O___f_l_u_s_h_(_) is called. It is therefore important to call
       _B_I_O___f_l_u_s_h_(_) whenever any pending data should be written such as when
       removing a buffering BIO using _B_I_O___p_o_p_(_). _B_I_O___f_l_u_s_h_(_) may need to be
       retried if the ultimate source/sink BIO is non blocking.

RREETTUURRNN VVAALLUUEESS
       _B_I_O___f___b_u_f_f_e_r_(_) returns the buffering BIO method.

       _B_I_O___g_e_t___b_u_f_f_e_r___n_u_m___l_i_n_e_s_(_) returns the number of lines buffered (may be
       0).

       _B_I_O___s_e_t___r_e_a_d___b_u_f_f_e_r___s_i_z_e_(_), _B_I_O___s_e_t___w_r_i_t_e___b_u_f_f_e_r___s_i_z_e_(_) and
       _B_I_O___s_e_t___b_u_f_f_e_r___s_i_z_e_(_) return 1 if the buffer was successfully resized
       or 0 for failure.

       _B_I_O___s_e_t___b_u_f_f_e_r___r_e_a_d___d_a_t_a_(_) returns 1 if the data was set correctly or 0
       if there was an error.

SSEEEE AALLSSOO
       _B_I_O(3), _B_I_O___r_e_s_e_t(3), _B_I_O___f_l_u_s_h(3), _B_I_O___p_o_p(3), _B_I_O___c_t_r_l(3),
       _B_I_O___i_n_t___c_t_r_l(3)



1.0.0g                            2010-05-03                   BIO_f_buffer(3)
