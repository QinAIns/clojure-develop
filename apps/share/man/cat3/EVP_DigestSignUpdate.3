EVP_DigestSignInit(3)               OpenSSL              EVP_DigestSignInit(3)



NNAAMMEE
       EVP_DigestSignInit, EVP_DigestSignUpdate, EVP_DigestSignFinal - EVP
       signing functions

SSYYNNOOPPSSIISS
        #include <openssl/evp.h>

        int EVP_DigestSignInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,
                               const EVP_MD *type, ENGINE *e, EVP_PKEY *pkey);
        int EVP_DigestSignUpdate(EVP_MD_CTX *ctx, const void *d, unsigned int cnt);
        int EVP_DigestSignFinal(EVP_MD_CTX *ctx, unsigned char *sig, size_t *siglen);

DDEESSCCRRIIPPTTIIOONN
       The EVP signature routines are a high level interface to digital signa-
       tures.

       _E_V_P___D_i_g_e_s_t_S_i_g_n_I_n_i_t_(_) sets up signing context ccttxx to use digest ttyyppee
       from ENGINE iimmppll and private key ppkkeeyy. ccttxx must be initialized with
       _E_V_P___M_D___C_T_X___i_n_i_t_(_) before calling this function. If ppccttxx is not NULL the
       EVP_PKEY_CTX of the signing operation will be written to **ppccttxx: this
       can be used to set alternative signing options.

       _E_V_P___D_i_g_e_s_t_S_i_g_n_U_p_d_a_t_e_(_) hashes ccnntt bytes of data at dd into the signature
       context ccttxx. This function can be called several times on the same ccttxx
       to include additional data. This function is currently implemented usig
       a macro.

       _E_V_P___D_i_g_e_s_t_S_i_g_n_F_i_n_a_l_(_) signs the data in ccttxx places the signature in
       ssiigg.  If ssiigg is NNUULLLL then the maximum size of the output buffer is
       written to the ssiigglleenn parameter. If ssiigg is not NNUULLLL then before the
       call the ssiigglleenn parameter should contain the length of the ssiigg buffer,
       if the call is successful the signature is written to ssiigg and the
       amount of data written to ssiigglleenn.

RREETTUURRNN VVAALLUUEESS
       _E_V_P___D_i_g_e_s_t_S_i_g_n_I_n_i_t_(_) _E_V_P___D_i_g_e_s_t_S_i_g_n_U_p_d_a_t_e_(_) and _E_V_P___D_i_g_e_s_t_S_i_g_n_a_F_i_n_a_l_(_)
       return 1 for success and 0 or a negative value for failure. In particu-
       lar a return value of -2 indicates the operation is not supported by
       the public key algorithm.

       The error codes can be obtained from _E_R_R___g_e_t___e_r_r_o_r(3).

NNOOTTEESS
       The EEVVPP interface to digital signatures should almost always be used in
       preference to the low level interfaces. This is because the code then
       becomes transparent to the algorithm used and much more flexible.

       In previous versions of OpenSSL there was a link between message digest
       types and public key algorithms. This meant that "clone" digests such
       as _E_V_P___d_s_s_1_(_) needed to be used to sign using SHA1 and DSA. This is no
       longer necessary and the use of clone digest is now discouraged.

       For some key types and parameters the random number generator must be
       seeded or the operation will fail.

       The call to _E_V_P___D_i_g_e_s_t_S_i_g_n_F_i_n_a_l_(_) internally finalizes a copy of the
       digest context. This means that calls to _E_V_P___D_i_g_e_s_t_S_i_g_n_U_p_d_a_t_e_(_) and
       _E_V_P___D_i_g_e_s_t_S_i_g_n_F_i_n_a_l_(_) can be called later to digest and sign additional
       data.

       Since only a copy of the digest context is ever finalized the context
       must be cleaned up after use by calling _E_V_P___M_D___C_T_X___c_l_e_a_n_u_p_(_) or a mem-
       ory leak will occur.

       The use of _E_V_P___P_K_E_Y___s_i_z_e_(_) with these functions is discouraged because
       some signature operations may have a signature length which depends on
       the parameters set. As a result _E_V_P___P_K_E_Y___s_i_z_e_(_) would have to return a
       value which indicates the maximum possible signature for any set of
       parameters.

SSEEEE AALLSSOO
       _E_V_P___D_i_g_e_s_t_V_e_r_i_f_y_I_n_i_t(3), _E_V_P___D_i_g_e_s_t_I_n_i_t(3), _e_r_r(3), _e_v_p(3), _h_m_a_c(3),
       _m_d_2(3), _m_d_5(3), _m_d_c_2(3), _r_i_p_e_m_d(3), _s_h_a(3), _d_g_s_t(1)

HHIISSTTOORRYY
       _E_V_P___D_i_g_e_s_t_S_i_g_n_I_n_i_t_(_), _E_V_P___D_i_g_e_s_t_S_i_g_n_U_p_d_a_t_e_(_) and _E_V_P___D_i_g_e_s_t_S_i_g_n_F_i_n_a_l_(_)
       were first added to OpenSSL 1.0.0.



1.0.0g                            2009-10-01             EVP_DigestSignInit(3)
