bn(3)                               OpenSSL                              bn(3)



NNAAMMEE
       bn - multiprecision integer arithmetics

SSYYNNOOPPSSIISS
        #include <openssl/bn.h>

        BIGNUM *BN_new(void);
        void BN_free(BIGNUM *a);
        void BN_init(BIGNUM *);
        void BN_clear(BIGNUM *a);
        void BN_clear_free(BIGNUM *a);

        BN_CTX *BN_CTX_new(void);
        void BN_CTX_init(BN_CTX *c);
        void BN_CTX_free(BN_CTX *c);

        BIGNUM *BN_copy(BIGNUM *a, const BIGNUM *b);
        BIGNUM *BN_dup(const BIGNUM *a);

        BIGNUM *BN_swap(BIGNUM *a, BIGNUM *b);

        int BN_num_bytes(const BIGNUM *a);
        int BN_num_bits(const BIGNUM *a);
        int BN_num_bits_word(BN_ULONG w);

        void BN_set_negative(BIGNUM *a, int n);
        int  BN_is_negative(const BIGNUM *a);

        int BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
        int BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
        int BN_mul(BIGNUM *r, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);
        int BN_sqr(BIGNUM *r, BIGNUM *a, BN_CTX *ctx);
        int BN_div(BIGNUM *dv, BIGNUM *rem, const BIGNUM *a, const BIGNUM *d,
                BN_CTX *ctx);
        int BN_mod(BIGNUM *rem, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);
        int BN_nnmod(BIGNUM *rem, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);
        int BN_mod_add(BIGNUM *ret, BIGNUM *a, BIGNUM *b, const BIGNUM *m,
                BN_CTX *ctx);
        int BN_mod_sub(BIGNUM *ret, BIGNUM *a, BIGNUM *b, const BIGNUM *m,
                BN_CTX *ctx);
        int BN_mod_mul(BIGNUM *ret, BIGNUM *a, BIGNUM *b, const BIGNUM *m,
                BN_CTX *ctx);
        int BN_mod_sqr(BIGNUM *ret, BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);
        int BN_exp(BIGNUM *r, BIGNUM *a, BIGNUM *p, BN_CTX *ctx);
        int BN_mod_exp(BIGNUM *r, BIGNUM *a, const BIGNUM *p,
                const BIGNUM *m, BN_CTX *ctx);
        int BN_gcd(BIGNUM *r, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);

        int BN_add_word(BIGNUM *a, BN_ULONG w);
        int BN_sub_word(BIGNUM *a, BN_ULONG w);
        int BN_mul_word(BIGNUM *a, BN_ULONG w);
        BN_ULONG BN_div_word(BIGNUM *a, BN_ULONG w);
        BN_ULONG BN_mod_word(const BIGNUM *a, BN_ULONG w);

        int BN_cmp(BIGNUM *a, BIGNUM *b);
        int BN_ucmp(BIGNUM *a, BIGNUM *b);
        int BN_is_zero(BIGNUM *a);
        int BN_is_one(BIGNUM *a);
        int BN_is_word(BIGNUM *a, BN_ULONG w);
        int BN_is_odd(BIGNUM *a);

        int BN_zero(BIGNUM *a);
        int BN_one(BIGNUM *a);
        const BIGNUM *BN_value_one(void);
        int BN_set_word(BIGNUM *a, unsigned long w);
        unsigned long BN_get_word(BIGNUM *a);

        int BN_rand(BIGNUM *rnd, int bits, int top, int bottom);
        int BN_pseudo_rand(BIGNUM *rnd, int bits, int top, int bottom);
        int BN_rand_range(BIGNUM *rnd, BIGNUM *range);
        int BN_pseudo_rand_range(BIGNUM *rnd, BIGNUM *range);

        BIGNUM *BN_generate_prime(BIGNUM *ret, int bits,int safe, BIGNUM *add,
                BIGNUM *rem, void (*callback)(int, int, void *), void *cb_arg);
        int BN_is_prime(const BIGNUM *p, int nchecks,
                void (*callback)(int, int, void *), BN_CTX *ctx, void *cb_arg);

        int BN_set_bit(BIGNUM *a, int n);
        int BN_clear_bit(BIGNUM *a, int n);
        int BN_is_bit_set(const BIGNUM *a, int n);
        int BN_mask_bits(BIGNUM *a, int n);
        int BN_lshift(BIGNUM *r, const BIGNUM *a, int n);
        int BN_lshift1(BIGNUM *r, BIGNUM *a);
        int BN_rshift(BIGNUM *r, BIGNUM *a, int n);
        int BN_rshift1(BIGNUM *r, BIGNUM *a);

        int BN_bn2bin(const BIGNUM *a, unsigned char *to);
        BIGNUM *BN_bin2bn(const unsigned char *s, int len, BIGNUM *ret);
        char *BN_bn2hex(const BIGNUM *a);
        char *BN_bn2dec(const BIGNUM *a);
        int BN_hex2bn(BIGNUM **a, const char *str);
        int BN_dec2bn(BIGNUM **a, const char *str);
        int BN_print(BIO *fp, const BIGNUM *a);
        int BN_print_fp(FILE *fp, const BIGNUM *a);
        int BN_bn2mpi(const BIGNUM *a, unsigned char *to);
        BIGNUM *BN_mpi2bn(unsigned char *s, int len, BIGNUM *ret);

        BIGNUM *BN_mod_inverse(BIGNUM *r, BIGNUM *a, const BIGNUM *n,
            BN_CTX *ctx);

        BN_RECP_CTX *BN_RECP_CTX_new(void);
        void BN_RECP_CTX_init(BN_RECP_CTX *recp);
        void BN_RECP_CTX_free(BN_RECP_CTX *recp);
        int BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *m, BN_CTX *ctx);
        int BN_mod_mul_reciprocal(BIGNUM *r, BIGNUM *a, BIGNUM *b,
               BN_RECP_CTX *recp, BN_CTX *ctx);

        BN_MONT_CTX *BN_MONT_CTX_new(void);
        void BN_MONT_CTX_init(BN_MONT_CTX *ctx);
        void BN_MONT_CTX_free(BN_MONT_CTX *mont);
        int BN_MONT_CTX_set(BN_MONT_CTX *mont, const BIGNUM *m, BN_CTX *ctx);
        BN_MONT_CTX *BN_MONT_CTX_copy(BN_MONT_CTX *to, BN_MONT_CTX *from);
        int BN_mod_mul_montgomery(BIGNUM *r, BIGNUM *a, BIGNUM *b,
                BN_MONT_CTX *mont, BN_CTX *ctx);
        int BN_from_montgomery(BIGNUM *r, BIGNUM *a, BN_MONT_CTX *mont,
                BN_CTX *ctx);
        int BN_to_montgomery(BIGNUM *r, BIGNUM *a, BN_MONT_CTX *mont,
                BN_CTX *ctx);

        BN_BLINDING *BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai,
               BIGNUM *mod);
        void BN_BLINDING_free(BN_BLINDING *b);
        int BN_BLINDING_update(BN_BLINDING *b,BN_CTX *ctx);
        int BN_BLINDING_convert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);
        int BN_BLINDING_invert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);
        int BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b,
               BN_CTX *ctx);
        int BN_BLINDING_invert_ex(BIGNUM *n,const BIGNUM *r,BN_BLINDING *b,
               BN_CTX *ctx);
        unsigned long BN_BLINDING_get_thread_id(const BN_BLINDING *);
        void BN_BLINDING_set_thread_id(BN_BLINDING *, unsigned long);
        unsigned long BN_BLINDING_get_flags(const BN_BLINDING *);
        void BN_BLINDING_set_flags(BN_BLINDING *, unsigned long);
        BN_BLINDING *BN_BLINDING_create_param(BN_BLINDING *b,
               const BIGNUM *e, BIGNUM *m, BN_CTX *ctx,
               int (*bn_mod_exp)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                                 const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx),
               BN_MONT_CTX *m_ctx);

DDEESSCCRRIIPPTTIIOONN
       This library performs arithmetic operations on integers of arbitrary
       size. It was written for use in public key cryptography, such as RSA
       and Diffie-Hellman.

       It uses dynamic memory allocation for storing its data structures.
       That means that there is no limit on the size of the numbers manipu-
       lated by these functions, but return values must always be checked in
       case a memory allocation error has occurred.

       The basic object in this library is a BBIIGGNNUUMM. It is used to hold a sin-
       gle large integer. This type should be considered opaque and fields
       should not be modified or accessed directly.

       The creation of BBIIGGNNUUMM objects is described in _B_N___n_e_w(3); _B_N___a_d_d(3)
       describes most of the arithmetic operations.  Comparison is described
       in _B_N___c_m_p(3); _B_N___z_e_r_o(3) describes certain assignments, _B_N___r_a_n_d(3) the
       generation of random numbers, _B_N___g_e_n_e_r_a_t_e___p_r_i_m_e(3) deals with prime
       numbers and _B_N___s_e_t___b_i_t(3) with bit operations. The conversion of
       BBIIGGNNUUMMs to external formats is described in _B_N___b_n_2_b_i_n(3).

SSEEEE AALLSSOO
       _b_n___i_n_t_e_r_n_a_l(3), _d_h(3), _e_r_r(3), _r_a_n_d(3), _r_s_a(3), _B_N___n_e_w(3),
       _B_N___C_T_X___n_e_w(3), _B_N___c_o_p_y(3), _B_N___s_w_a_p(3), _B_N___n_u_m___b_y_t_e_s(3), _B_N___a_d_d(3),
       _B_N___a_d_d___w_o_r_d(3), _B_N___c_m_p(3), _B_N___z_e_r_o(3), _B_N___r_a_n_d(3), _B_N___g_e_n_e_r_-
       _a_t_e___p_r_i_m_e(3), _B_N___s_e_t___b_i_t(3), _B_N___b_n_2_b_i_n(3), _B_N___m_o_d___i_n_v_e_r_s_e(3),
       _B_N___m_o_d___m_u_l___r_e_c_i_p_r_o_c_a_l(3), _B_N___m_o_d___m_u_l___m_o_n_t_g_o_m_e_r_y(3), _B_N___B_L_I_N_D_I_N_G___n_e_w(3)



1.0.0g                            2008-07-03                             bn(3)
