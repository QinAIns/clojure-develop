BIO_should_retry(3)                 OpenSSL                BIO_should_retry(3)



NNAAMMEE
       BIO_should_retry, BIO_should_read, BIO_should_write, BIO_should_io_spe-
       cial, BIO_retry_type, BIO_should_retry, BIO_get_retry_BIO,
       BIO_get_retry_reason - BIO retry functions

SSYYNNOOPPSSIISS
        #include <openssl/bio.h>

        #define BIO_should_read(a)             ((a)->flags & BIO_FLAGS_READ)
        #define BIO_should_write(a)            ((a)->flags & BIO_FLAGS_WRITE)
        #define BIO_should_io_special(a)       ((a)->flags & BIO_FLAGS_IO_SPECIAL)
        #define BIO_retry_type(a)              ((a)->flags & BIO_FLAGS_RWS)
        #define BIO_should_retry(a)            ((a)->flags & BIO_FLAGS_SHOULD_RETRY)

        #define BIO_FLAGS_READ         0x01
        #define BIO_FLAGS_WRITE        0x02
        #define BIO_FLAGS_IO_SPECIAL   0x04
        #define BIO_FLAGS_RWS (BIO_FLAGS_READ|BIO_FLAGS_WRITE|BIO_FLAGS_IO_SPECIAL)
        #define BIO_FLAGS_SHOULD_RETRY 0x08

        BIO *  BIO_get_retry_BIO(BIO *bio, int *reason);
        int    BIO_get_retry_reason(BIO *bio);

DDEESSCCRRIIPPTTIIOONN
       These functions determine why a BIO is not able to read or write data.
       They will typically be called after a failed _B_I_O___r_e_a_d_(_) or _B_I_O___w_r_i_t_e_(_)
       call.

       _B_I_O___s_h_o_u_l_d___r_e_t_r_y_(_) is true if the call that produced this condition
       should then be retried at a later time.

       If _B_I_O___s_h_o_u_l_d___r_e_t_r_y_(_) is false then the cause is an error condition.

       _B_I_O___s_h_o_u_l_d___r_e_a_d_(_) is true if the cause of the condition is that a BIO
       needs to read data.

       _B_I_O___s_h_o_u_l_d___w_r_i_t_e_(_) is true if the cause of the condition is that a BIO
       needs to read data.

       _B_I_O___s_h_o_u_l_d___i_o___s_p_e_c_i_a_l_(_) is true if some "special" condition, that is a
       reason other than reading or writing is the cause of the condition.

       _B_I_O___r_e_t_r_y___t_y_p_e_(_) returns a mask of the cause of a retry condition con-
       sisting of the values BBIIOO__FFLLAAGGSS__RREEAADD, BBIIOO__FFLLAAGGSS__WWRRIITTEE,
       BBIIOO__FFLLAAGGSS__IIOO__SSPPEECCIIAALL though current BIO types will only set one of
       these.

       _B_I_O___g_e_t___r_e_t_r_y___B_I_O_(_) determines the precise reason for the special con-
       dition, it returns the BIO that caused this condition and if rreeaassoonn is
       not NULL it contains the reason code. The meaning of the reason code
       and the action that should be taken depends on the type of BIO that
       resulted in this condition.

       _B_I_O___g_e_t___r_e_t_r_y___r_e_a_s_o_n_(_) returns the reason for a special condition if
       passed the relevant BIO, for example as returned by
       _B_I_O___g_e_t___r_e_t_r_y___B_I_O_(_).

NNOOTTEESS
       If _B_I_O___s_h_o_u_l_d___r_e_t_r_y_(_) returns false then the precise "error condition"
       depends on the BIO type that caused it and the return code of the BIO
       operation. For example if a call to _B_I_O___r_e_a_d_(_) on a socket BIO returns
       0 and _B_I_O___s_h_o_u_l_d___r_e_t_r_y_(_) is false then the cause will be that the con-
       nection closed. A similar condition on a file BIO will mean that it has
       reached EOF. Some BIO types may place additional information on the
       error queue. For more details see the individual BIO type manual pages.

       If the underlying I/O structure is in a blocking mode almost all cur-
       rent BIO types will not request a retry, because the underlying I/O
       calls will not. If the application knows that the BIO type will never
       signal a retry then it need not call _B_I_O___s_h_o_u_l_d___r_e_t_r_y_(_) after a failed
       BIO I/O call. This is typically done with file BIOs.

       SSL BIOs are the only current exception to this rule: they can request
       a retry even if the underlying I/O structure is blocking, if a hand-
       shake occurs during a call to _B_I_O___r_e_a_d_(_). An application can retry the
       failed call immediately or avoid this situation by setting
       SSL_MODE_AUTO_RETRY on the underlying SSL structure.

       While an application may retry a failed non blocking call immediately
       this is likely to be very inefficient because the call will fail
       repeatedly until data can be processed or is available. An application
       will normally wait until the necessary condition is satisfied. How this
       is done depends on the underlying I/O structure.

       For example if the cause is ultimately a socket and _B_I_O___s_h_o_u_l_d___r_e_a_d_(_)
       is true then a call to _s_e_l_e_c_t_(_) may be made to wait until data is
       available and then retry the BIO operation. By combining the retry con-
       ditions of several non blocking BIOs in a single _s_e_l_e_c_t_(_) call it is
       possible to service several BIOs in a single thread, though the perfor-
       mance may be poor if SSL BIOs are present because long delays can occur
       during the initial handshake process.

       It is possible for a BIO to block indefinitely if the underlying I/O
       structure cannot process or return any data. This depends on the behav-
       iour of the platforms I/O functions. This is often not desirable: one
       solution is to use non blocking I/O and use a timeout on the _s_e_l_e_c_t_(_)
       (or equivalent) call.

BBUUGGSS
       The OpenSSL ASN1 functions cannot gracefully deal with non blocking
       I/O: that is they cannot retry after a partial read or write. This is
       usually worked around by only passing the relevant data to ASN1 func-
       tions when the entire structure can be read or written.

SSEEEE AALLSSOO
       TBA



1.0.0g                            2010-04-06               BIO_should_retry(3)
