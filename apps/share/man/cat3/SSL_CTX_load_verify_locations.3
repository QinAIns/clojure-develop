SSL_CTX_load_verify_locations(3)    OpenSSL   SSL_CTX_load_verify_locations(3)



NNAAMMEE
       SSL_CTX_load_verify_locations - set default locations for trusted CA
       certificates

SSYYNNOOPPSSIISS
        #include <openssl/ssl.h>

        int SSL_CTX_load_verify_locations(SSL_CTX *ctx, const char *CAfile,
                                          const char *CApath);

DDEESSCCRRIIPPTTIIOONN
       _S_S_L___C_T_X___l_o_a_d___v_e_r_i_f_y___l_o_c_a_t_i_o_n_s_(_) specifies the locations for ccttxx, at
       which CA certificates for verification purposes are located. The cer-
       tificates available via CCAAffiillee and CCAAppaatthh are trusted.

NNOOTTEESS
       If CCAAffiillee is not NULL, it points to a file of CA certificates in PEM
       format. The file can contain several CA certificates identified by

        -----BEGIN CERTIFICATE-----
        ... (CA certificate in base64 encoding) ...
        -----END CERTIFICATE-----

       sequences. Before, between, and after the certificates text is allowed
       which can be used e.g. for descriptions of the certificates.

       The CCAAffiillee is processed on execution of the _S_S_L___C_T_X___l_o_a_d___v_e_r_i_f_y___l_o_c_a_-
       _t_i_o_n_s_(_) function.

       If CCAAppaatthh is not NULL, it points to a directory containing CA certifi-
       cates in PEM format. The files each contain one CA certificate. The
       files are looked up by the CA subject name hash value, which must hence
       be available.  If more than one CA certificate with the same name hash
       value exist, the extension must be different (e.g. 9d66eef0.0,
       9d66eef0.1 etc). The search is performed in the ordering of the exten-
       sion number, regardless of other properties of the certificates.  Use
       the cc__rreehhaasshh utility to create the necessary links.

       The certificates in CCAAppaatthh are only looked up when required, e.g. when
       building the certificate chain or when actually performing the verifi-
       cation of a peer certificate.

       When looking up CA certificates, the OpenSSL library will first search
       the certificates in CCAAffiillee, then those in CCAAppaatthh. Certificate matching
       is done based on the subject name, the key identifier (if present), and
       the serial number as taken from the certificate to be verified. If
       these data do not match, the next certificate will be tried. If a first
       certificate matching the parameters is found, the verification process
       will be performed; no other certificates for the same parameters will
       be searched in case of failure.

       In server mode, when requesting a client certificate, the server must
       send the list of CAs of which it will accept client certificates. This
       list is not influenced by the contents of CCAAffiillee or CCAAppaatthh and must
       explicitly be set using the _S_S_L___C_T_X___s_e_t___c_l_i_e_n_t___C_A___l_i_s_t(3) family of
       functions.

       When building its own certificate chain, an OpenSSL client/server will
       try to fill in missing certificates from CCAAffiillee/CCAAppaatthh, if the certifi-
       cate chain was not explicitly specified (see
       _S_S_L___C_T_X___a_d_d___e_x_t_r_a___c_h_a_i_n___c_e_r_t(3), _S_S_L___C_T_X___u_s_e___c_e_r_t_i_f_i_c_a_t_e(3).

WWAARRNNIINNGGSS
       If several CA certificates matching the name, key identifier, and
       serial number condition are available, only the first one will be exam-
       ined. This may lead to unexpected results if the same CA certificate is
       available with different expiration dates. If a "certificate expired"
       verification error occurs, no other certificate will be searched. Make
       sure to not have expired certificates mixed with valid ones.

EEXXAAMMPPLLEESS
       Generate a CA certificate file with descriptive text from the CA cer-
       tificates ca1.pem ca2.pem ca3.pem:

        #!/bin/sh
        rm CAfile.pem
        for i in ca1.pem ca2.pem ca3.pem ; do
          openssl x509 -in $i -text >> CAfile.pem
        done

       Prepare the directory /some/where/certs containing several CA certifi-
       cates for use as CCAAppaatthh:

        cd /some/where/certs
        c_rehash .

RREETTUURRNN VVAALLUUEESS
       The following return values can occur:

       0   The operation failed because CCAAffiillee and CCAAppaatthh are NULL or the pro-
           cessing at one of the locations specified failed. Check the error
           stack to find out the reason.

       1   The operation succeeded.

SSEEEE AALLSSOO
       _s_s_l(3), _S_S_L___C_T_X___s_e_t___c_l_i_e_n_t___C_A___l_i_s_t(3), _S_S_L___g_e_t___c_l_i_e_n_t___C_A___l_i_s_t(3),
       _S_S_L___C_T_X___u_s_e___c_e_r_t_i_f_i_c_a_t_e(3), _S_S_L___C_T_X___a_d_d___e_x_t_r_a___c_h_a_i_n___c_e_r_t(3),
       _S_S_L___C_T_X___s_e_t___c_e_r_t___s_t_o_r_e(3)



1.0.0g                            2001-09-07  SSL_CTX_load_verify_locations(3)
