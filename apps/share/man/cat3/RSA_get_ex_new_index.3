RSA_get_ex_new_index(3)             OpenSSL            RSA_get_ex_new_index(3)



NNAAMMEE
       RSA_get_ex_new_index, RSA_set_ex_data, RSA_get_ex_data - add applica-
       tion specific data to RSA structures

SSYYNNOOPPSSIISS
        #include <openssl/rsa.h>

        int RSA_get_ex_new_index(long argl, void *argp,
                       CRYPTO_EX_new *new_func,
                       CRYPTO_EX_dup *dup_func,
                       CRYPTO_EX_free *free_func);

        int RSA_set_ex_data(RSA *r, int idx, void *arg);

        void *RSA_get_ex_data(RSA *r, int idx);

        typedef int CRYPTO_EX_new(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
                                  int idx, long argl, void *argp);
        typedef void CRYPTO_EX_free(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
                                    int idx, long argl, void *argp);
        typedef int CRYPTO_EX_dup(CRYPTO_EX_DATA *to, CRYPTO_EX_DATA *from, void *from_d,
                                  int idx, long argl, void *argp);

DDEESSCCRRIIPPTTIIOONN
       Several OpenSSL structures can have application specific data attached
       to them.  This has several potential uses, it can be used to cache data
       associated with a structure (for example the hash of some part of the
       structure) or some additional data (for example a handle to the data in
       an external library).

       Since the application data can be anything at all it is passed and
       retrieved as a vvooiidd ** type.

       The _RR_SS_AA____gg_ee_tt____ee_xx____nn_ee_ww____ii_nn_dd_ee_xx_((_)) function is initially called to "register"
       some new application specific data. It takes three optional function
       pointers which are called when the parent structure (in this case an
       RSA structure) is initially created, when it is copied and when it is
       freed up. If any or all of these function pointer arguments are not
       used they should be set to NULL. The precise manner in which these
       function pointers are called is described in more detail below.
       _RR_SS_AA____gg_ee_tt____ee_xx____nn_ee_ww____ii_nn_dd_ee_xx_((_)) also takes additional long and pointer parame-
       ters which will be passed to the supplied functions but which otherwise
       have no special meaning. It returns an iinnddeexx which should be stored
       (typically in a static variable) and passed used in the iiddxx parameter
       in the remaining functions. Each successful call to
       _RR_SS_AA____gg_ee_tt____ee_xx____nn_ee_ww____ii_nn_dd_ee_xx_((_)) will return an index greater than any previously
       returned, this is important because the optional functions are called
       in order of increasing index value.

       _RR_SS_AA____ss_ee_tt____ee_xx____dd_aa_tt_aa_((_)) is used to set application specific data, the data is
       supplied in the aarrgg parameter and its precise meaning is up to the
       application.

       _RR_SS_AA____gg_ee_tt____ee_xx____dd_aa_tt_aa_((_)) is used to retrieve application specific data. The
       data is returned to the application, this will be the same value as
       supplied to a previous _RR_SS_AA____ss_ee_tt____ee_xx____dd_aa_tt_aa_((_)) call.

       _nn_ee_ww____ff_uu_nn_cc_((_)) is called when a structure is initially allocated (for exam-
       ple with _RR_SS_AA____nn_ee_ww_((_)). The parent structure members will not have any
       meaningful values at this point. This function will typically be used
       to allocate any application specific structure.

       _ff_rr_ee_ee____ff_uu_nn_cc_((_)) is called when a structure is being freed up. The dynamic
       parent structure members should not be accessed because they will be
       freed up when this function is called.

       _nn_ee_ww____ff_uu_nn_cc_((_)) and _ff_rr_ee_ee____ff_uu_nn_cc_((_)) take the same parameters. ppaarreenntt is a
       pointer to the parent RSA structure. ppttrr is a the application specific
       data (this wont be of much use in _nn_ee_ww____ff_uu_nn_cc_((_)). aadd is a pointer to the
       CCRRYYPPTTOO__EEXX__DDAATTAA structure from the parent RSA structure: the functions
       _CC_RR_YY_PP_TT_OO____gg_ee_tt____ee_xx____dd_aa_tt_aa_((_)) and _CC_RR_YY_PP_TT_OO____ss_ee_tt____ee_xx____dd_aa_tt_aa_((_)) can be called to manipu-
       late it. The iiddxx parameter is the index: this will be the same value
       returned by _RR_SS_AA____gg_ee_tt____ee_xx____nn_ee_ww____ii_nn_dd_ee_xx_((_)) when the functions were initially
       registered. Finally the aarrggll and aarrggpp parameters are the values origi-
       nally passed to the same corresponding parameters when
       _RR_SS_AA____gg_ee_tt____ee_xx____nn_ee_ww____ii_nn_dd_ee_xx_((_)) was called.

       _dd_uu_pp____ff_uu_nn_cc_((_)) is called when a structure is being copied. Pointers to the
       destination and source CCRRYYPPTTOO__EEXX__DDAATTAA structures are passed in the ttoo
       and ffrroomm parameters respectively. The ffrroomm__dd parameter is passed a
       pointer to the source application data when the function is called,
       when the function returns the value is copied to the destination: the
       application can thus modify the data pointed to by ffrroomm__dd and have dif-
       ferent values in the source and destination.  The iiddxx, aarrggll and aarrggpp
       parameters are the same as those in _nn_ee_ww____ff_uu_nn_cc_((_)) and _ff_rr_ee_ee____ff_uu_nn_cc_((_)).

RREETTUURRNN VVAALLUUEESS
       _RR_SS_AA____gg_ee_tt____ee_xx____nn_ee_ww____ii_nn_dd_ee_xx_((_)) returns a new index or -1 on failure (note 0 is
       a valid index value).

       _RR_SS_AA____ss_ee_tt____ee_xx____dd_aa_tt_aa_((_)) returns 1 on success or 0 on failure.

       _RR_SS_AA____gg_ee_tt____ee_xx____dd_aa_tt_aa_((_)) returns the application data or 0 on failure. 0 may
       also be valid application data but currently it can only fail if given
       an invalid iiddxx parameter.

       _nn_ee_ww____ff_uu_nn_cc_((_)) and _dd_uu_pp____ff_uu_nn_cc_((_)) should return 0 for failure and 1 for suc-
       cess.

       On failure an error code can be obtained from _E_R_R___g_e_t___e_r_r_o_r(3).

BBUUGGSS
       _dd_uu_pp____ff_uu_nn_cc_((_)) is currently never called.

       The return value of _nn_ee_ww____ff_uu_nn_cc_((_)) is ignored.

       The _nn_ee_ww____ff_uu_nn_cc_((_)) function isn't very useful because no meaningful values
       are present in the parent RSA structure when it is called.

SSEEEE AALLSSOO
       _r_s_a(3), _C_R_Y_P_T_O___s_e_t___e_x___d_a_t_a(3)

HHIISSTTOORRYY
       _R_S_A___g_e_t___e_x___n_e_w___i_n_d_e_x_(_), _R_S_A___s_e_t___e_x___d_a_t_a_(_) and _R_S_A___g_e_t___e_x___d_a_t_a_(_) are
       available since SSLeay 0.9.0.



1.0.0g                            2006-12-06           RSA_get_ex_new_index(3)
