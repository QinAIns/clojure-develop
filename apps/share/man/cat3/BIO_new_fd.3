BIO_s_fd(3)                         OpenSSL                        BIO_s_fd(3)



NNAAMMEE
       BIO_s_fd, BIO_set_fd, BIO_get_fd, BIO_new_fd - file descriptor BIO

SSYYNNOOPPSSIISS
        #include <openssl/bio.h>

        BIO_METHOD *   BIO_s_fd(void);

        #define BIO_set_fd(b,fd,c)     BIO_int_ctrl(b,BIO_C_SET_FD,c,fd)
        #define BIO_get_fd(b,c)        BIO_ctrl(b,BIO_C_GET_FD,0,(char *)c)

        BIO *BIO_new_fd(int fd, int close_flag);

DDEESSCCRRIIPPTTIIOONN
       _B_I_O___s___f_d_(_) returns the file descriptor BIO method. This is a wrapper
       round the platforms file descriptor routines such as _r_e_a_d_(_) and
       _w_r_i_t_e_(_).

       _B_I_O___r_e_a_d_(_) and _B_I_O___w_r_i_t_e_(_) read or write the underlying descriptor.
       _B_I_O___p_u_t_s_(_) is supported but _B_I_O___g_e_t_s_(_) is not.

       If the close flag is set then then _c_l_o_s_e_(_) is called on the underlying
       file descriptor when the BIO is freed.

       _B_I_O___r_e_s_e_t_(_) attempts to change the file pointer to the start of file
       using lseek(fd, 0, 0).

       _B_I_O___s_e_e_k_(_) sets the file pointer to position ooffss from start of file
       using lseek(fd, ofs, 0).

       _B_I_O___t_e_l_l_(_) returns the current file position by calling lseek(fd, 0,
       1).

       _B_I_O___s_e_t___f_d_(_) sets the file descriptor of BIO bb to ffdd and the close flag
       to cc.

       _B_I_O___g_e_t___f_d_(_) places the file descriptor in cc if it is not NULL, it also
       returns the file descriptor. If cc is not NULL it should be of type (int
       *).

       _B_I_O___n_e_w___f_d_(_) returns a file descriptor BIO using ffdd and cclloossee__ffllaagg.

NNOOTTEESS
       The behaviour of _B_I_O___r_e_a_d_(_) and _B_I_O___w_r_i_t_e_(_) depends on the behavior of
       the platforms _r_e_a_d_(_) and _w_r_i_t_e_(_) calls on the descriptor. If the under-
       lying file descriptor is in a non blocking mode then the BIO will
       behave in the manner described in the _B_I_O___r_e_a_d(3) and
       _B_I_O___s_h_o_u_l_d___r_e_t_r_y(3) manual pages.

       File descriptor BIOs should not be used for socket I/O. Use socket BIOs
       instead.

RREETTUURRNN VVAALLUUEESS
       _B_I_O___s___f_d_(_) returns the file descriptor BIO method.

       _B_I_O___r_e_s_e_t_(_) returns zero for success and -1 if an error occurred.
       _B_I_O___s_e_e_k_(_) and _B_I_O___t_e_l_l_(_) return the current file position or -1 is an
       error occurred. These values reflect the underlying _l_s_e_e_k_(_) behaviour.

       _B_I_O___s_e_t___f_d_(_) always returns 1.

       _B_I_O___g_e_t___f_d_(_) returns the file descriptor or -1 if the BIO has not been
       initialized.

       _B_I_O___n_e_w___f_d_(_) returns the newly allocated BIO or NULL is an error
       occurred.

EEXXAAMMPPLLEE
       This is a file descriptor BIO version of "Hello World":

        BIO *out;
        out = BIO_new_fd(fileno(stdout), BIO_NOCLOSE);
        BIO_printf(out, "Hello World\n");
        BIO_free(out);

SSEEEE AALLSSOO
       _B_I_O___s_e_e_k(3), _B_I_O___t_e_l_l(3), _B_I_O___r_e_s_e_t(3), _B_I_O___r_e_a_d(3), _B_I_O___w_r_i_t_e(3),
       _B_I_O___p_u_t_s(3), _B_I_O___g_e_t_s(3), _B_I_O___p_r_i_n_t_f(3), _B_I_O___s_e_t___c_l_o_s_e(3),
       _B_I_O___g_e_t___c_l_o_s_e(3)



1.0.0g                            2000-09-17                       BIO_s_fd(3)
