EVP_PKEY_verifyrecover(3)           OpenSSL          EVP_PKEY_verifyrecover(3)



NNAAMMEE
       EVP_PKEY_verifyrecover_init, EVP_PKEY_verifyrecover - recover signature
       using a public key algorithm

SSYYNNOOPPSSIISS
        #include <openssl/evp.h>

        int EVP_PKEY_verifyrecover_init(EVP_PKEY_CTX *ctx);
        int EVP_PKEY_verifyrecover(EVP_PKEY_CTX *ctx,
                               unsigned char *rout, size_t *routlen,
                               const unsigned char *sig, size_t siglen);

DDEESSCCRRIIPPTTIIOONN
       The _E_V_P___P_K_E_Y___v_e_r_i_f_y_r_e_c_o_v_e_r___i_n_i_t_(_) function initializes a public key
       algorithm context using key ppkkeeyy for a verify recover operation.

       The _E_V_P___P_K_E_Y___v_e_r_i_f_y_r_e_c_o_v_e_r_(_) function recovers signed data using ccttxx.
       The signature is specified using the ssiigg and ssiigglleenn parameters. If rroouutt
       is NNUULLLL then the maximum size of the output buffer is written to the
       rroouuttlleenn parameter. If rroouutt is not NNUULLLL then before the call the rroouuttlleenn
       parameter should contain the length of the rroouutt buffer, if the call is
       successful recovered data is written to rroouutt and the amount of data
       written to rroouuttlleenn.

NNOOTTEESS
       Normally an application is only interested in whether a signature veri-
       fication operation is successful in those cases the _E_V_P___v_e_r_i_f_y_(_) func-
       tion should be used.

       Sometimes however it is useful to obtain the data originally signed
       using a signing operation. Only certain public key algorithms can
       recover a signature in this way (for example RSA in PKCS padding mode).

       After the call to _E_V_P___P_K_E_Y___v_e_r_i_f_y_r_e_c_o_v_e_r___i_n_i_t_(_) algorithm specific con-
       trol operations can be performed to set any appropriate parameters for
       the operation.

       The function _E_V_P___P_K_E_Y___v_e_r_i_f_y_r_e_c_o_v_e_r_(_) can be called more than once on
       the same context if several operations are performed using the same
       parameters.

RREETTUURRNN VVAALLUUEESS
       _E_V_P___P_K_E_Y___v_e_r_i_f_y_r_e_c_o_v_e_r___i_n_i_t_(_) and _E_V_P___P_K_E_Y___v_e_r_i_f_y_r_e_c_o_v_e_r_(_) return 1 for
       success and 0 or a negative value for failure. In particular a return
       value of -2 indicates the operation is not supported by the public key
       algorithm.

EEXXAAMMPPLLEE
       Recover digest originally signed using PKCS#1 and SHA256 digest:

        #include <openssl/evp.h>
        #include <openssl/rsa.h>

        EVP_PKEY_CTX *ctx;
        unsigned char *rout, *sig;
        size_t routlen, siglen;
        EVP_PKEY *verify_key;
        /* NB: assumes verify_key, sig and siglen are already set up
         * and that verify_key is an RSA public key
         */
        ctx = EVP_PKEY_CTX_new(verify_key);
        if (!ctx)
               /* Error occurred */
        if (EVP_PKEY_verifyrecover_init(ctx) <= 0)
               /* Error */
        if (EVP_PKEY_CTX_set_rsa_padding(ctx, RSA_PKCS1_PADDING) <= 0)
               /* Error */
        if (EVP_PKEY_CTX_set_signature_md(ctx, EVP_sha256()) <= 0)
               /* Error */

        /* Determine buffer length */
        if (EVP_PKEY_verifyrecover(ctx, NULL, &routlen, sig, siglen) <= 0)
               /* Error */

        rout = OPENSSL_malloc(routlen);

        if (!rout)
               /* malloc failure */

        if (EVP_PKEY_verifyrecover(ctx, rout, &routlen, sig, siglen) <= 0)
               /* Error */

        /* Recovered data is routlen bytes written to buffer rout */

SSEEEE AALLSSOO
       _E_V_P___P_K_E_Y___C_T_X___n_e_w(3), _E_V_P___P_K_E_Y___e_n_c_r_y_p_t(3), _E_V_P___P_K_E_Y___d_e_c_r_y_p_t(3),
       _E_V_P___P_K_E_Y___s_i_g_n(3), _E_V_P___P_K_E_Y___v_e_r_i_f_y(3), _E_V_P___P_K_E_Y___d_e_r_i_v_e(3)

HHIISSTTOORRYY
       These functions were first added to OpenSSL 1.0.0.



1.0.0g                            2010-12-02         EVP_PKEY_verifyrecover(3)
