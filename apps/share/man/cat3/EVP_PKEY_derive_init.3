EVP_PKEY_derive(3)                  OpenSSL                 EVP_PKEY_derive(3)



NNAAMMEE
       EVP_PKEY_derive_init, EVP_PKEY_derive_set_peer, EVP_PKEY_derive -
       derive public key algorithm shared secret.

SSYYNNOOPPSSIISS
        #include <openssl/evp.h>

        int EVP_PKEY_derive_init(EVP_PKEY_CTX *ctx);
        int EVP_PKEY_derive_set_peer(EVP_PKEY_CTX *ctx, EVP_PKEY *peer);
        int EVP_PKEY_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen);

DDEESSCCRRIIPPTTIIOONN
       The _E_V_P___P_K_E_Y___d_e_r_i_v_e___i_n_i_t_(_) function initializes a public key algorithm
       context using key ppkkeeyy for shared secret derivation.

       The _E_V_P___P_K_E_Y___d_e_r_i_v_e___s_e_t___p_e_e_r_(_) function sets the peer key: this will
       normally be a public key.

       The _E_V_P___P_K_E_Y___d_e_r_i_v_e_(_) derives a shared secret using ccttxx.  If kkeeyy is
       NNUULLLL then the maximum size of the output buffer is written to the
       kkeeyylleenn parameter. If kkeeyy is not NNUULLLL then before the call the kkeeyylleenn
       parameter should contain the length of the kkeeyy buffer, if the call is
       successful the shared secret is written to kkeeyy and the amount of data
       written to kkeeyylleenn.

NNOOTTEESS
       After the call to _E_V_P___P_K_E_Y___d_e_r_i_v_e___i_n_i_t_(_) algorithm specific control
       operations can be performed to set any appropriate parameters for the
       operation.

       The function _E_V_P___P_K_E_Y___d_e_r_i_v_e_(_) can be called more than once on the same
       context if several operations are performed using the same parameters.

RREETTUURRNN VVAALLUUEESS
       _E_V_P___P_K_E_Y___d_e_r_i_v_e___i_n_i_t_(_) and _E_V_P___P_K_E_Y___d_e_r_i_v_e_(_) return 1 for success and 0
       or a negative value for failure. In particular a return value of -2
       indicates the operation is not supported by the public key algorithm.

EEXXAAMMPPLLEE
       Derive shared secret (for example DH or EC keys):

        #include <openssl/evp.h>
        #include <openssl/rsa.h>

        EVP_PKEY_CTX *ctx;
        unsigned char *skey;
        size_t skeylen;
        EVP_PKEY *pkey, *peerkey;
        /* NB: assumes pkey, peerkey have been already set up */

        ctx = EVP_PKEY_CTX_new(pkey);
        if (!ctx)
               /* Error occurred */
        if (EVP_PKEY_derive_init(ctx) <= 0)
               /* Error */
        if (EVP_PKEY_derive_set_peer(ctx, peerkey) <= 0)
               /* Error */

        /* Determine buffer length */
        if (EVP_PKEY_derive(ctx, NULL, &skeylen) <= 0)
               /* Error */

        skey = OPENSSL_malloc(skeylen);

        if (!skey)
               /* malloc failure */

        if (EVP_PKEY_derive(ctx, skey, &skeylen) <= 0)
               /* Error */

        /* Shared secret is skey bytes written to buffer skey */

SSEEEE AALLSSOO
       _E_V_P___P_K_E_Y___C_T_X___n_e_w(3), _E_V_P___P_K_E_Y___e_n_c_r_y_p_t(3), _E_V_P___P_K_E_Y___d_e_c_r_y_p_t(3),
       _E_V_P___P_K_E_Y___s_i_g_n(3), _E_V_P___P_K_E_Y___v_e_r_i_f_y(3), _E_V_P___P_K_E_Y___v_e_r_i_f_y_r_e_c_o_v_e_r(3),

HHIISSTTOORRYY
       These functions were first added to OpenSSL 1.0.0.



1.0.0g                            2009-10-01                EVP_PKEY_derive(3)
