EVP_PKEY_keygen(3)                  OpenSSL                 EVP_PKEY_keygen(3)



NNAAMMEE
       EVP_PKEY_keygen_init, EVP_PKEY_keygen, EVP_PKEY_paramgen_init,
       EVP_PKEY_paramgen, EVP_PKEY_CTX_set_cb, EVP_PKEY_CTX_get_cb,
       EVP_PKEY_CTX_get_keygen_info, EVP_PKEVP_PKEY_CTX_set_app_data,
       EVP_PKEY_CTX_get_app_data - key and parameter generation functions

SSYYNNOOPPSSIISS
        #include <openssl/evp.h>

        int EVP_PKEY_keygen_init(EVP_PKEY_CTX *ctx);
        int EVP_PKEY_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey);
        int EVP_PKEY_paramgen_init(EVP_PKEY_CTX *ctx);
        int EVP_PKEY_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey);

        typedef int EVP_PKEY_gen_cb(EVP_PKEY_CTX *ctx);

        void EVP_PKEY_CTX_set_cb(EVP_PKEY_CTX *ctx, EVP_PKEY_gen_cb *cb);
        EVP_PKEY_gen_cb *EVP_PKEY_CTX_get_cb(EVP_PKEY_CTX *ctx);

        int EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX *ctx, int idx);

        void EVP_PKEY_CTX_set_app_data(EVP_PKEY_CTX *ctx, void *data);
        void *EVP_PKEY_CTX_get_app_data(EVP_PKEY_CTX *ctx);

DDEESSCCRRIIPPTTIIOONN
       The _E_V_P___P_K_E_Y___k_e_y_g_e_n___i_n_i_t_(_) function initializes a public key algorithm
       context using key ppkkeeyy for a key genration operation.

       The _E_V_P___P_K_E_Y___k_e_y_g_e_n_(_) function performs a key generation operation, the
       generated key is written to ppppkkeeyy.

       The functions _E_V_P___P_K_E_Y___p_a_r_a_m_g_e_n___i_n_i_t_(_) and _E_V_P___P_K_E_Y___p_a_r_a_m_g_e_n_(_) are sim-
       ilar except parameters are generated.

       The function _E_V_P___P_K_E_Y___s_e_t___c_b_(_) sets the key or parameter generation
       callback to ccbb. The function _E_V_P___P_K_E_Y___C_T_X___g_e_t___c_b_(_) returns the key or
       parameter generation callback.

       The function _E_V_P___P_K_E_Y___C_T_X___g_e_t___k_e_y_g_e_n___i_n_f_o_(_) returns parameters associ-
       ated with the generation operation. If iiddxx is -1 the total number of
       parameters available is returned. Any non negative value returns the
       value of that parameter. _E_V_P___P_K_E_Y___C_T_X___g_e_n___k_e_y_g_e_n___i_n_f_o_(_) with a non-neg-
       ative value for iiddxx should only be called within the generation call-
       back.

       If the callback returns 0 then the key genration operation is aborted
       and an error occurs. This might occur during a time consuming operation
       where a user clicks on a "cancel" button.

       The functions _E_V_P___P_K_E_Y___C_T_X___s_e_t___a_p_p___d_a_t_a_(_) and
       _E_V_P___P_K_E_Y___C_T_X___g_e_t___a_p_p___d_a_t_a_(_) set and retrieve an opaque pointer. This
       can be used to set some application defined value which can be
       retrieved in the callback: for example a handle which is used to update
       a "progress dialog".

NNOOTTEESS
       After the call to _E_V_P___P_K_E_Y___k_e_y_g_e_n___i_n_i_t_(_) or _E_V_P___P_K_E_Y___p_a_r_a_m_g_e_n___i_n_i_t_(_)
       algorithm specific control operations can be performed to set any
       appropriate parameters for the operation.

       The functions _E_V_P___P_K_E_Y___k_e_y_g_e_n_(_) and _E_V_P___P_K_E_Y___p_a_r_a_m_g_e_n_(_) can be called
       more than once on the same context if several operations are performed
       using the same parameters.

       The meaning of the parameters passed to the callback will depend on the
       algorithm and the specifiic implementation of the algorithm. Some might
       not give any useful information at all during key or parameter genera-
       tion. Others might not even call the callback.

       The operation performed by key or parameter generation depends on the
       algorithm used. In some cases (e.g. EC with a supplied named curve) the
       "generation" option merely sets the appropriate fields in an EVP_PKEY
       structure.

       In OpenSSL an EVP_PKEY structure containing a private key also contains
       the public key components and parameters (if any). An OpenSSL private
       key is equivalent to what some libraries call a "key pair". A private
       key can be used in functions which require the use of a public key or
       parameters.

RREETTUURRNN VVAALLUUEESS
       _E_V_P___P_K_E_Y___k_e_y_g_e_n___i_n_i_t_(_), _E_V_P___P_K_E_Y___p_a_r_a_m_g_e_n___i_n_i_t_(_), _E_V_P___P_K_E_Y___k_e_y_g_e_n_(_) and
       _E_V_P___P_K_E_Y___p_a_r_a_m_g_e_n_(_) return 1 for success and 0 or a negative value for
       failure.  In particular a return value of -2 indicates the operation is
       not supported by the public key algorithm.

EEXXAAMMPPLLEESS
       Generate a 2048 bit RSA key:

        #include <openssl/evp.h>
        #include <openssl/rsa.h>

        EVP_PKEY_CTX *ctx;
        EVP_PKEY *pkey = NULL;
        ctx = EVP_PKEY_CTX_new_id(EVP_PKEY_RSA, NULL);
        if (!ctx)
               /* Error occurred */
        if (EVP_PKEY_keygen_init(ctx) <= 0)
               /* Error */
        if (EVP_PKEY_CTX_set_rsa_keygen_bits(ctx, 2048) <= 0)
               /* Error */

        /* Generate key */
        if (EVP_PKEY_keygen(ctx, &pkey) <= 0)
               /* Error */

       Generate a key from a set of parameters:

        #include <openssl/evp.h>
        #include <openssl/rsa.h>

        EVP_PKEY_CTX *ctx;
        EVP_PKEY *pkey = NULL, *param;
        /* Assumed param is set up already */
        ctx = EVP_PKEY_CTX_new(param);
        if (!ctx)
               /* Error occurred */
        if (EVP_PKEY_keygen_init(ctx) <= 0)
               /* Error */

        /* Generate key */
        if (EVP_PKEY_keygen(ctx, &pkey) <= 0)
               /* Error */

       Example of generation callback for OpenSSL public key implementations:

        /* Application data is a BIO to output status to */

        EVP_PKEY_CTX_set_app_data(ctx, status_bio);

        static int genpkey_cb(EVP_PKEY_CTX *ctx)
               {
               char c='*';
               BIO *b = EVP_PKEY_CTX_get_app_data(ctx);
               int p;
               p = EVP_PKEY_CTX_get_keygen_info(ctx, 0);
               if (p == 0) c='.';
               if (p == 1) c='+';
               if (p == 2) c='*';
               if (p == 3) c='\n';
               BIO_write(b,&c,1);
               (void)BIO_flush(b);
               return 1;
               }

SSEEEE AALLSSOO
       _E_V_P___P_K_E_Y___C_T_X___n_e_w(3), _E_V_P___P_K_E_Y___e_n_c_r_y_p_t(3), _E_V_P___P_K_E_Y___d_e_c_r_y_p_t(3),
       _E_V_P___P_K_E_Y___s_i_g_n(3), _E_V_P___P_K_E_Y___v_e_r_i_f_y(3), _E_V_P___P_K_E_Y___v_e_r_i_f_y_r_e_c_o_v_e_r(3),
       _E_V_P___P_K_E_Y___d_e_r_i_v_e(3)

HHIISSTTOORRYY
       These functions were first added to OpenSSL 1.0.0.



1.0.0g                            2009-10-01                EVP_PKEY_keygen(3)
