BIO_s_accept(3)                     OpenSSL                    BIO_s_accept(3)



NNAAMMEE
       BIO_s_accept, BIO_set_accept_port, BIO_get_accept_port,
       BIO_set_nbio_accept, BIO_set_accept_bios, BIO_set_bind_mode,
       BIO_get_bind_mode, BIO_do_accept - accept BIO

SSYYNNOOPPSSIISS
        #include <openssl/bio.h>

        BIO_METHOD *BIO_s_accept(void);

        long BIO_set_accept_port(BIO *b, char *name);
        char *BIO_get_accept_port(BIO *b);

        BIO *BIO_new_accept(char *host_port);

        long BIO_set_nbio_accept(BIO *b, int n);
        long BIO_set_accept_bios(BIO *b, char *bio);

        long BIO_set_bind_mode(BIO *b, long mode);
        long BIO_get_bind_mode(BIO *b, long dummy);

        #define BIO_BIND_NORMAL                0
        #define BIO_BIND_REUSEADDR_IF_UNUSED   1
        #define BIO_BIND_REUSEADDR             2

        int BIO_do_accept(BIO *b);

DDEESSCCRRIIPPTTIIOONN
       _B_I_O___s___a_c_c_e_p_t_(_) returns the accept BIO method. This is a wrapper round
       the platform's TCP/IP socket accept routines.

       Using accept BIOs, TCP/IP connections can be accepted and data trans-
       ferred using only BIO routines. In this way any platform specific oper-
       ations are hidden by the BIO abstraction.

       Read and write operations on an accept BIO will perform I/O on the
       underlying connection. If no connection is established and the port
       (see below) is set up properly then the BIO waits for an incoming con-
       nection.

       Accept BIOs support _B_I_O___p_u_t_s_(_) but not _B_I_O___g_e_t_s_(_).

       If the close flag is set on an accept BIO then any active connection on
       that chain is shutdown and the socket closed when the BIO is freed.

       Calling _B_I_O___r_e_s_e_t_(_) on a accept BIO will close any active connection
       and reset the BIO into a state where it awaits another incoming connec-
       tion.

       _B_I_O___g_e_t___f_d_(_) and _B_I_O___s_e_t___f_d_(_) can be called to retrieve or set the
       accept socket. See _B_I_O___s___f_d(3)

       _B_I_O___s_e_t___a_c_c_e_p_t___p_o_r_t_(_) uses the string nnaammee to set the accept port. The
       port is represented as a string of the form "host:port", where "host"
       is the interface to use and "port" is the port.  Either or both values
       can be "*" which is interpreted as meaning any interface or port
       respectively. "port" has the same syntax as the port specified in
       _B_I_O___s_e_t___c_o_n_n___p_o_r_t_(_) for connect BIOs, that is it can be a numerical
       port string or a string to lookup using _g_e_t_s_e_r_v_b_y_n_a_m_e_(_) and a string
       table.

       _B_I_O___n_e_w___a_c_c_e_p_t_(_) combines _B_I_O___n_e_w_(_) and _B_I_O___s_e_t___a_c_c_e_p_t___p_o_r_t_(_) into a
       single call: that is it creates a new accept BIO with port hhoosstt__ppoorrtt.

       _B_I_O___s_e_t___n_b_i_o___a_c_c_e_p_t_(_) sets the accept socket to blocking mode (the
       default) if nn is 0 or non blocking mode if nn is 1.

       _B_I_O___s_e_t___a_c_c_e_p_t___b_i_o_s_(_) can be used to set a chain of BIOs which will be
       duplicated and prepended to the chain when an incoming connection is
       received. This is useful if, for example, a buffering or SSL BIO is
       required for each connection. The chain of BIOs must not be freed after
       this call, they will be automatically freed when the accept BIO is
       freed.

       _B_I_O___s_e_t___b_i_n_d___m_o_d_e_(_) and _B_I_O___g_e_t___b_i_n_d___m_o_d_e_(_) set and retrieve the cur-
       rent bind mode. If BIO_BIND_NORMAL (the default) is set then another
       socket cannot be bound to the same port. If BIO_BIND_REUSEADDR is set
       then other sockets can bind to the same port. If BIO_BIND_REUSE-
       ADDR_IF_UNUSED is set then and attempt is first made to use
       BIO_BIN_NORMAL, if this fails and the port is not in use then a second
       attempt is made using BIO_BIND_REUSEADDR.

       _B_I_O___d_o___a_c_c_e_p_t_(_) serves two functions. When it is first called, after
       the accept BIO has been setup, it will attempt to create the accept
       socket and bind an address to it. Second and subsequent calls to
       _B_I_O___d_o___a_c_c_e_p_t_(_) will await an incoming connection, or request a retry
       in non blocking mode.

NNOOTTEESS
       When an accept BIO is at the end of a chain it will await an incoming
       connection before processing I/O calls. When an accept BIO is not at
       then end of a chain it passes I/O calls to the next BIO in the chain.

       When a connection is established a new socket BIO is created for the
       connection and appended to the chain. That is the chain is now
       accept->socket. This effectively means that attempting I/O on an ini-
       tial accept socket will await an incoming connection then perform I/O
       on it.

       If any additional BIOs have been set using _B_I_O___s_e_t___a_c_c_e_p_t___b_i_o_s_(_) then
       they are placed between the socket and the accept BIO, that is the
       chain will be accept->otherbios->socket.

       If a server wishes to process multiple connections (as is normally the
       case) then the accept BIO must be made available for further incoming
       connections. This can be done by waiting for a connection and then
       calling:

        connection = BIO_pop(accept);

       After this call ccoonnnneeccttiioonn will contain a BIO for the recently estab-
       lished connection and aacccceepptt will now be a single BIO again which can
       be used to await further incoming connections.  If no further connec-
       tions will be accepted the aacccceepptt can be freed using _B_I_O___f_r_e_e_(_).

       If only a single connection will be processed it is possible to perform
       I/O using the accept BIO itself. This is often undesirable however
       because the accept BIO will still accept additional incoming connec-
       tions. This can be resolved by using _B_I_O___p_o_p_(_) (see above) and freeing
       up the accept BIO after the initial connection.

       If the underlying accept socket is non-blocking and _B_I_O___d_o___a_c_c_e_p_t_(_) is
       called to await an incoming connection it is possible for
       _B_I_O___s_h_o_u_l_d___i_o___s_p_e_c_i_a_l_(_) with the reason BIO_RR_ACCEPT. If this happens
       then it is an indication that an accept attempt would block: the appli-
       cation should take appropriate action to wait until the underlying
       socket has accepted a connection and retry the call.

       _B_I_O___s_e_t___a_c_c_e_p_t___p_o_r_t_(_), _B_I_O___g_e_t___a_c_c_e_p_t___p_o_r_t_(_), _B_I_O___s_e_t___n_b_i_o___a_c_c_e_p_t_(_),
       _B_I_O___s_e_t___a_c_c_e_p_t___b_i_o_s_(_), _B_I_O___s_e_t___b_i_n_d___m_o_d_e_(_), _B_I_O___g_e_t___b_i_n_d___m_o_d_e_(_) and
       _B_I_O___d_o___a_c_c_e_p_t_(_) are macros.

RREETTUURRNN VVAALLUUEESS
       TBA

EEXXAAMMPPLLEE
       This example accepts two connections on port 4444, sends messages down
       each and finally closes both down.

        BIO *abio, *cbio, *cbio2;
        ERR_load_crypto_strings();
        abio = BIO_new_accept("4444");

        /* First call to BIO_accept() sets up accept BIO */
        if(BIO_do_accept(abio) <= 0) {
               fprintf(stderr, "Error setting up accept\n");
               ERR_print_errors_fp(stderr);
               exit(0);
        }

        /* Wait for incoming connection */
        if(BIO_do_accept(abio) <= 0) {
               fprintf(stderr, "Error accepting connection\n");
               ERR_print_errors_fp(stderr);
               exit(0);
        }
        fprintf(stderr, "Connection 1 established\n");
        /* Retrieve BIO for connection */
        cbio = BIO_pop(abio);
        BIO_puts(cbio, "Connection 1: Sending out Data on initial connection\n");
        fprintf(stderr, "Sent out data on connection 1\n");
        /* Wait for another connection */
        if(BIO_do_accept(abio) <= 0) {
               fprintf(stderr, "Error accepting connection\n");
               ERR_print_errors_fp(stderr);
               exit(0);
        }
        fprintf(stderr, "Connection 2 established\n");
        /* Close accept BIO to refuse further connections */
        cbio2 = BIO_pop(abio);
        BIO_free(abio);
        BIO_puts(cbio2, "Connection 2: Sending out Data on second\n");
        fprintf(stderr, "Sent out data on connection 2\n");

        BIO_puts(cbio, "Connection 1: Second connection established\n");
        /* Close the two established connections */
        BIO_free(cbio);
        BIO_free(cbio2);

SSEEEE AALLSSOO
       TBA



1.0.0g                            2002-12-13                   BIO_s_accept(3)
