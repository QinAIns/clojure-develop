ASN1_STRING_print_ex(3)             OpenSSL            ASN1_STRING_print_ex(3)



NNAAMMEE
       ASN1_STRING_print_ex, ASN1_STRING_print_ex_fp - ASN1_STRING output rou-
       tines.

SSYYNNOOPPSSIISS
        #include <openssl/asn1.h>

        int ASN1_STRING_print_ex(BIO *out, ASN1_STRING *str, unsigned long flags);
        int ASN1_STRING_print_ex_fp(FILE *fp, ASN1_STRING *str, unsigned long flags);
        int ASN1_STRING_print(BIO *out, ASN1_STRING *str);

DDEESSCCRRIIPPTTIIOONN
       These functions output an AASSNN11__SSTTRRIINNGG structure. AASSNN11__SSTTRRIINNGG is used to
       represent all the ASN1 string types.

       _A_S_N_1___S_T_R_I_N_G___p_r_i_n_t___e_x_(_) outputs ssttrr to oouutt, the format is determined by
       the options ffllaaggss. _A_S_N_1___S_T_R_I_N_G___p_r_i_n_t___e_x___f_p_(_) is identical except it
       outputs to ffpp instead.

       _A_S_N_1___S_T_R_I_N_G___p_r_i_n_t_(_) prints ssttrr to oouutt but using a different format to
       _A_S_N_1___S_T_R_I_N_G___p_r_i_n_t___e_x_(_). It replaces unprintable characters (other than
       CR, LF) with '.'.

NNOOTTEESS
       _A_S_N_1___S_T_R_I_N_G___p_r_i_n_t_(_) is a legacy function which should be avoided in new
       applications.

       Although there are a large number of options frequently AASSNN11__SSTTRR--
       FFLLGGSS__RRFFCC22225533 is suitable, or on UTF8 terminals AASSNN11__SSTTRRFFLLGGSS__RRFFCC22225533 &&
       ~~AASSNN11__SSTTRRFFLLGGSS__EESSCC__MMSSBB.

       The complete set of supported options for ffllaaggss is listed below.

       Various characters can be escaped. If AASSNN11__SSTTRRFFLLGGSS__EESSCC__22225533 is set the
       characters determined by RFC2253 are escaped. If AASSNN11__SSTTRRFFLLGGSS__EESSCC__CCTTRRLL
       is set control characters are escaped. If AASSNN11__SSTTRRFFLLGGSS__EESSCC__MMSSBB is set
       characters with the MSB set are escaped: this option should nnoott be used
       if the terminal correctly interprets UTF8 sequences.

       Escaping takes several forms.

       If the character being escaped is a 16 bit character then the form
       "\UXXXX" is used using exactly four characters for the hex representa-
       tion. If it is 32 bits then "\WXXXXXXXX" is used using eight characters
       of its hex representation. These forms will only be used if UTF8 con-
       version is not set (see below).

       Printable characters are normally escaped using the backslash '\' char-
       acter. If AASSNN11__SSTTRRFFLLGGSS__EESSCC__QQUUOOTTEE is set then the whole string is
       instead surrounded by double quote characters: this is arguably more
       readable than the backslash notation. Other characters use the "\XX"
       using exactly two characters of the hex representation.

       If AASSNN11__SSTTRRFFLLGGSS__UUTTFF88__CCOONNVVEERRTT is set then characters are converted to
       UTF8 format first. If the terminal supports the display of UTF8
       sequences then this option will correctly display multi byte charac-
       ters.

       If AASSNN11__SSTTRRFFLLGGSS__IIGGNNOORREE__TTYYPPEE is set then the string type is not inter-
       preted at all: everything is assumed to be one byte per character. This
       is primarily for debugging purposes and can result in confusing output
       in multi character strings.

       If AASSNN11__SSTTRRFFLLGGSS__SSHHOOWW__TTYYPPEE is set then the string type itself is printed
       out before its value (for example "BMPSTRING"), this actually uses
       _A_S_N_1___t_a_g_2_s_t_r_(_).

       The content of a string instead of being interpreted can be "dumped":
       this just outputs the value of the string using the form #XXXX using
       hex format for each octet.

       If AASSNN11__SSTTRRFFLLGGSS__DDUUMMPP__AALLLL is set then any type is dumped.

       Normally non character string types (such as OCTET STRING) are assumed
       to be one byte per character, if AASSNN11__SSTTRRFFLLGGSS__DDUUMMPP__UUNNKKNNOOWWNN is set then
       they will be dumped instead.

       When a type is dumped normally just the content octets are printed, if
       AASSNN11__SSTTRRFFLLGGSS__DDUUMMPP__DDEERR is set then the complete encoding is dumped
       instead (including tag and length octets).

       AASSNN11__SSTTRRFFLLGGSS__RRFFCC22225533 includes all the flags required by RFC2253. It is
       equivalent to:
        ASN1_STRFLGS_ESC_2253 | ASN1_STRFLGS_ESC_CTRL | ASN1_STRFLGS_ESC_MSB |
        ASN1_STRFLGS_UTF8_CONVERT | ASN1_STRFLGS_DUMP_UNKNOWN ASN1_STR-
       FLGS_DUMP_DER

SSEEEE AALLSSOO
       _X_5_0_9___N_A_M_E___p_r_i_n_t___e_x(3), _A_S_N_1___t_a_g_2_s_t_r(3)

HHIISSTTOORRYY
       TBA



1.0.0g                            2007-02-03           ASN1_STRING_print_ex(3)
