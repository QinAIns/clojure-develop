BIO_ctrl(3)                         OpenSSL                        BIO_ctrl(3)



NNAAMMEE
       BIO_ctrl, BIO_callback_ctrl, BIO_ptr_ctrl, BIO_int_ctrl, BIO_reset,
       BIO_seek, BIO_tell, BIO_flush, BIO_eof, BIO_set_close, BIO_get_close,
       BIO_pending, BIO_wpending, BIO_ctrl_pending, BIO_ctrl_wpending,
       BIO_get_info_callback, BIO_set_info_callback - BIO control operations

SSYYNNOOPPSSIISS
        #include <openssl/bio.h>

        long BIO_ctrl(BIO *bp,int cmd,long larg,void *parg);
        long BIO_callback_ctrl(BIO *b, int cmd, void (*fp)(struct bio_st *, int, const char *, int, long, long));
        char * BIO_ptr_ctrl(BIO *bp,int cmd,long larg);
        long BIO_int_ctrl(BIO *bp,int cmd,long larg,int iarg);

        int BIO_reset(BIO *b);
        int BIO_seek(BIO *b, int ofs);
        int BIO_tell(BIO *b);
        int BIO_flush(BIO *b);
        int BIO_eof(BIO *b);
        int BIO_set_close(BIO *b,long flag);
        int BIO_get_close(BIO *b);
        int BIO_pending(BIO *b);
        int BIO_wpending(BIO *b);
        size_t BIO_ctrl_pending(BIO *b);
        size_t BIO_ctrl_wpending(BIO *b);

        int BIO_get_info_callback(BIO *b,bio_info_cb **cbp);
        int BIO_set_info_callback(BIO *b,bio_info_cb *cb);

        typedef void bio_info_cb(BIO *b, int oper, const char *ptr, int arg1, long arg2, long arg3);

DDEESSCCRRIIPPTTIIOONN
       _B_I_O___c_t_r_l_(_), _B_I_O___c_a_l_l_b_a_c_k___c_t_r_l_(_), _B_I_O___p_t_r___c_t_r_l_(_) and _B_I_O___i_n_t___c_t_r_l_(_) are
       BIO "control" operations taking arguments of various types.  These
       functions are not normally called directly, various macros are used
       instead. The standard macros are described below, macros specific to a
       particular type of BIO are described in the specific BIOs manual page
       as well as any special features of the standard calls.

       _B_I_O___r_e_s_e_t_(_) typically resets a BIO to some initial state, in the case
       of file related BIOs for example it rewinds the file pointer to the
       start of the file.

       _B_I_O___s_e_e_k_(_) resets a file related BIO's (that is file descriptor and
       FILE BIOs) file position pointer to ooffss bytes from start of file.

       _B_I_O___t_e_l_l_(_) returns the current file position of a file related BIO.

       _B_I_O___f_l_u_s_h_(_) normally writes out any internally buffered data, in some
       cases it is used to signal EOF and that no more data will be written.

       _B_I_O___e_o_f_(_) returns 1 if the BIO has read EOF, the precise meaning of
       "EOF" varies according to the BIO type.

       _B_I_O___s_e_t___c_l_o_s_e_(_) sets the BIO bb close flag to ffllaagg. ffllaagg can take the
       value BIO_CLOSE or BIO_NOCLOSE. Typically BIO_CLOSE is used in a
       source/sink BIO to indicate that the underlying I/O stream should be
       closed when the BIO is freed.

       _B_I_O___g_e_t___c_l_o_s_e_(_) returns the BIOs close flag.

       _B_I_O___p_e_n_d_i_n_g_(_), _B_I_O___c_t_r_l___p_e_n_d_i_n_g_(_), _B_I_O___w_p_e_n_d_i_n_g_(_) and _B_I_O___c_t_r_l___w_p_e_n_d_-
       _i_n_g_(_) return the number of pending characters in the BIOs read and
       write buffers.  Not all BIOs support these calls. _B_I_O___c_t_r_l___p_e_n_d_i_n_g_(_)
       and _B_I_O___c_t_r_l___w_p_e_n_d_i_n_g_(_) return a size_t type and are functions,
       _B_I_O___p_e_n_d_i_n_g_(_) and _B_I_O___w_p_e_n_d_i_n_g_(_) are macros which call _B_I_O___c_t_r_l_(_).

RREETTUURRNN VVAALLUUEESS
       _B_I_O___r_e_s_e_t_(_) normally returns 1 for success and 0 or -1 for failure.
       File BIOs are an exception, they return 0 for success and -1 for fail-
       ure.

       _B_I_O___s_e_e_k_(_) and _B_I_O___t_e_l_l_(_) both return the current file position on suc-
       cess and -1 for failure, except file BIOs which for _B_I_O___s_e_e_k_(_) always
       return 0 for success and -1 for failure.

       _B_I_O___f_l_u_s_h_(_) returns 1 for success and 0 or -1 for failure.

       _B_I_O___e_o_f_(_) returns 1 if EOF has been reached 0 otherwise.

       _B_I_O___s_e_t___c_l_o_s_e_(_) always returns 1.

       _B_I_O___g_e_t___c_l_o_s_e_(_) returns the close flag value: BIO_CLOSE or BIO_NOCLOSE.

       _B_I_O___p_e_n_d_i_n_g_(_), _B_I_O___c_t_r_l___p_e_n_d_i_n_g_(_), _B_I_O___w_p_e_n_d_i_n_g_(_) and _B_I_O___c_t_r_l___w_p_e_n_d_-
       _i_n_g_(_) return the amount of pending data.

NNOOTTEESS
       _B_I_O___f_l_u_s_h_(_), because it can write data may return 0 or -1 indicating
       that the call should be retried later in a similar manner to
       _B_I_O___w_r_i_t_e_(_).  The _B_I_O___s_h_o_u_l_d___r_e_t_r_y_(_) call should be used and appropri-
       ate action taken is the call fails.

       The return values of _B_I_O___p_e_n_d_i_n_g_(_) and _B_I_O___w_p_e_n_d_i_n_g_(_) may not reliably
       determine the amount of pending data in all cases. For example in the
       case of a file BIO some data may be available in the FILE structures
       internal buffers but it is not possible to determine this in a portably
       way. For other types of BIO they may not be supported.

       Filter BIOs if they do not internally handle a particular _B_I_O___c_t_r_l_(_)
       operation usually pass the operation to the next BIO in the chain.
       This often means there is no need to locate the required BIO for a par-
       ticular operation, it can be called on a chain and it will be automati-
       cally passed to the relevant BIO. However this can cause unexpected
       results: for example no current filter BIOs implement _B_I_O___s_e_e_k_(_), but
       this may still succeed if the chain ends in a FILE or file descriptor
       BIO.

       Source/sink BIOs return an 0 if they do not recognize the _B_I_O___c_t_r_l_(_)
       operation.

BBUUGGSS
       Some of the return values are ambiguous and care should be taken. In
       particular a return value of 0 can be returned if an operation is not
       supported, if an error occurred, if EOF has not been reached and in the
       case of _B_I_O___s_e_e_k_(_) on a file BIO for a successful operation.

SSEEEE AALLSSOO
       TBA



1.0.0g                            2000-09-19                       BIO_ctrl(3)
