SSL_write(3)                        OpenSSL                       SSL_write(3)



NNAAMMEE
       SSL_write - write bytes to a TLS/SSL connection.

SSYYNNOOPPSSIISS
        #include <openssl/ssl.h>

        int SSL_write(SSL *ssl, const void *buf, int num);

DDEESSCCRRIIPPTTIIOONN
       _S_S_L___w_r_i_t_e_(_) writes nnuumm bytes from the buffer bbuuff into the specified ssssll
       connection.

NNOOTTEESS
       If necessary, _S_S_L___w_r_i_t_e_(_) will negotiate a TLS/SSL session, if not
       already explicitly performed by _S_S_L___c_o_n_n_e_c_t(3) or _S_S_L___a_c_c_e_p_t(3). If the
       peer requests a re-negotiation, it will be performed transparently dur-
       ing the _S_S_L___w_r_i_t_e_(_) operation. The behaviour of _S_S_L___w_r_i_t_e_(_) depends on
       the underlying BIO.

       For the transparent negotiation to succeed, the ssssll must have been ini-
       tialized to client or server mode. This is being done by calling
       _S_S_L___s_e_t___c_o_n_n_e_c_t___s_t_a_t_e(3) or _S_S_L___s_e_t___a_c_c_e_p_t___s_t_a_t_e_(_) before the first
       call to an _S_S_L___r_e_a_d(3) or _S_S_L___w_r_i_t_e_(_) function.

       If the underlying BIO is bblloocckkiinngg, _S_S_L___w_r_i_t_e_(_) will only return, once
       the write operation has been finished or an error occurred, except when
       a renegotiation take place, in which case a SSL_ERROR_WANT_READ may
       occur.  This behaviour can be controlled with the SSL_MODE_AUTO_RETRY
       flag of the _S_S_L___C_T_X___s_e_t___m_o_d_e(3) call.

       If the underlying BIO is nnoonn--bblloocckkiinngg, _S_S_L___w_r_i_t_e_(_) will also return,
       when the underlying BIO could not satisfy the needs of _S_S_L___w_r_i_t_e_(_) to
       continue the operation. In this case a call to _S_S_L___g_e_t___e_r_r_o_r(3) with
       the return value of _S_S_L___w_r_i_t_e_(_) will yield SSSSLL__EERRRROORR__WWAANNTT__RREEAADD or
       SSSSLL__EERRRROORR__WWAANNTT__WWRRIITTEE. As at any time a re-negotiation is possible, a
       call to _S_S_L___w_r_i_t_e_(_) can also cause read operations! The calling process
       then must repeat the call after taking appropriate action to satisfy
       the needs of _S_S_L___w_r_i_t_e_(_). The action depends on the underlying BIO.
       When using a non-blocking socket, nothing is to be done, but _s_e_l_e_c_t_(_)
       can be used to check for the required condition. When using a buffering
       BIO, like a BIO pair, data must be written into or retrieved out of the
       BIO before being able to continue.

       _S_S_L___w_r_i_t_e_(_) will only return with success, when the complete contents
       of bbuuff of length nnuumm has been written. This default behaviour can be
       changed with the SSL_MODE_ENABLE_PARTIAL_WRITE option of
       _S_S_L___C_T_X___s_e_t___m_o_d_e(3). When this flag is set, _S_S_L___w_r_i_t_e_(_) will also
       return with success, when a partial write has been successfully com-
       pleted. In this case the _S_S_L___w_r_i_t_e_(_) operation is considered completed.
       The bytes are sent and a new _S_S_L___w_r_i_t_e_(_) operation with a new buffer
       (with the already sent bytes removed) must be started.  A partial write
       is performed with the size of a message block, which is 16kB for
       SSLv3/TLSv1.

WWAARRNNIINNGG
       When an _S_S_L___w_r_i_t_e_(_) operation has to be repeated because of
       SSSSLL__EERRRROORR__WWAANNTT__RREEAADD or SSSSLL__EERRRROORR__WWAANNTT__WWRRIITTEE, it must be repeated with
       the same arguments.

       When calling _S_S_L___w_r_i_t_e_(_) with num=0 bytes to be sent the behaviour is
       undefined.

RREETTUURRNN VVAALLUUEESS
       The following return values can occur:

       >0  The write operation was successful, the return value is the number
           of bytes actually written to the TLS/SSL connection.

       0   The write operation was not successful. Probably the underlying
           connection was closed. Call _S_S_L___g_e_t___e_r_r_o_r_(_) with the return value
           rreett to find out, whether an error occurred or the connection was
           shut down cleanly (SSL_ERROR_ZERO_RETURN).

           SSLv2 (deprecated) does not support a shutdown alert protocol, so
           it can only be detected, whether the underlying connection was
           closed. It cannot be checked, why the closure happened.

       <0  The write operation was not successful, because either an error
           occurred or action must be taken by the calling process. Call
           _S_S_L___g_e_t___e_r_r_o_r_(_) with the return value rreett to find out the reason.

SSEEEE AALLSSOO
       _S_S_L___g_e_t___e_r_r_o_r(3), _S_S_L___r_e_a_d(3), _S_S_L___C_T_X___s_e_t___m_o_d_e(3), _S_S_L___C_T_X___n_e_w(3),
       _S_S_L___c_o_n_n_e_c_t(3), _S_S_L___a_c_c_e_p_t(3) _S_S_L___s_e_t___c_o_n_n_e_c_t___s_t_a_t_e(3), _s_s_l(3), _b_i_o(3)



1.0.0g                            2002-07-19                      SSL_write(3)
