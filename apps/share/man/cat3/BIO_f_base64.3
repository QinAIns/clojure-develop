BIO_f_base64(3)                     OpenSSL                    BIO_f_base64(3)



NNAAMMEE
       BIO_f_base64 - base64 BIO filter

SSYYNNOOPPSSIISS
        #include <openssl/bio.h>
        #include <openssl/evp.h>

        BIO_METHOD *   BIO_f_base64(void);

DDEESSCCRRIIPPTTIIOONN
       _B_I_O___f___b_a_s_e_6_4_(_) returns the base64 BIO method. This is a filter BIO that
       base64 encodes any data written through it and decodes any data read
       through it.

       Base64 BIOs do not support _B_I_O___g_e_t_s_(_) or _B_I_O___p_u_t_s_(_).

       _B_I_O___f_l_u_s_h_(_) on a base64 BIO that is being written through is used to
       signal that no more data is to be encoded: this is used to flush the
       final block through the BIO.

       The flag BIO_FLAGS_BASE64_NO_NL can be set with _B_I_O___s_e_t___f_l_a_g_s_(_) to
       encode the data all on one line or expect the data to be all on one
       line.

NNOOTTEESS
       Because of the format of base64 encoding the end of the encoded block
       cannot always be reliably determined.

RREETTUURRNN VVAALLUUEESS
       _B_I_O___f___b_a_s_e_6_4_(_) returns the base64 BIO method.

EEXXAAMMPPLLEESS
       Base64 encode the string "Hello World\n" and write the result to stan-
       dard output:

        BIO *bio, *b64;
        char message[] = "Hello World \n";

        b64 = BIO_new(BIO_f_base64());
        bio = BIO_new_fp(stdout, BIO_NOCLOSE);
        bio = BIO_push(b64, bio);
        BIO_write(bio, message, strlen(message));
        BIO_flush(bio);

        BIO_free_all(bio);

       Read Base64 encoded data from standard input and write the decoded data
       to standard output:

        BIO *bio, *b64, *bio_out;
        char inbuf[512];
        int inlen;

        b64 = BIO_new(BIO_f_base64());
        bio = BIO_new_fp(stdin, BIO_NOCLOSE);
        bio_out = BIO_new_fp(stdout, BIO_NOCLOSE);
        bio = BIO_push(b64, bio);
        while((inlen = BIO_read(bio, inbuf, 512)) > 0)
               BIO_write(bio_out, inbuf, inlen);

        BIO_free_all(bio);

BBUUGGSS
       The ambiguity of EOF in base64 encoded data can cause additional data
       following the base64 encoded block to be misinterpreted.

       There should be some way of specifying a test that the BIO can perform
       to reliably determine EOF (for example a MIME boundary).

SSEEEE AALLSSOO
       TBA



1.0.0g                            2005-11-03                   BIO_f_base64(3)
