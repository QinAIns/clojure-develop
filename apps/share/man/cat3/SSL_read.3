SSL_read(3)                         OpenSSL                        SSL_read(3)



NNAAMMEE
       SSL_read - read bytes from a TLS/SSL connection.

SSYYNNOOPPSSIISS
        #include <openssl/ssl.h>

        int SSL_read(SSL *ssl, void *buf, int num);

DDEESSCCRRIIPPTTIIOONN
       _S_S_L___r_e_a_d_(_) tries to read nnuumm bytes from the specified ssssll into the buf-
       fer bbuuff.

NNOOTTEESS
       If necessary, _S_S_L___r_e_a_d_(_) will negotiate a TLS/SSL session, if not
       already explicitly performed by _S_S_L___c_o_n_n_e_c_t(3) or _S_S_L___a_c_c_e_p_t(3). If the
       peer requests a re-negotiation, it will be performed transparently dur-
       ing the _S_S_L___r_e_a_d_(_) operation. The behaviour of _S_S_L___r_e_a_d_(_) depends on
       the underlying BIO.

       For the transparent negotiation to succeed, the ssssll must have been ini-
       tialized to client or server mode. This is being done by calling
       _S_S_L___s_e_t___c_o_n_n_e_c_t___s_t_a_t_e(3) or _S_S_L___s_e_t___a_c_c_e_p_t___s_t_a_t_e_(_) before the first
       call to an _S_S_L___r_e_a_d_(_) or _S_S_L___w_r_i_t_e(3) function.

       _S_S_L___r_e_a_d_(_) works based on the SSL/TLS records. The data are received in
       records (with a maximum record size of 16kB for SSLv3/TLSv1). Only when
       a record has been completely received, it can be processed (decryption
       and check of integrity). Therefore data that was not retrieved at the
       last call of _S_S_L___r_e_a_d_(_) can still be buffered inside the SSL layer and
       will be retrieved on the next call to _S_S_L___r_e_a_d_(_). If nnuumm is higher than
       the number of bytes buffered, _S_S_L___r_e_a_d_(_) will return with the bytes
       buffered.  If no more bytes are in the buffer, _S_S_L___r_e_a_d_(_) will trigger
       the processing of the next record. Only when the record has been
       received and processed completely, _S_S_L___r_e_a_d_(_) will return reporting
       success. At most the contents of the record will be returned. As the
       size of an SSL/TLS record may exceed the maximum packet size of the
       underlying transport (e.g. TCP), it may be necessary to read several
       packets from the transport layer before the record is complete and
       _S_S_L___r_e_a_d_(_) can succeed.

       If the underlying BIO is bblloocckkiinngg, _S_S_L___r_e_a_d_(_) will only return, once
       the read operation has been finished or an error occurred, except when
       a renegotiation take place, in which case a SSL_ERROR_WANT_READ may
       occur.  This behaviour can be controlled with the SSL_MODE_AUTO_RETRY
       flag of the _S_S_L___C_T_X___s_e_t___m_o_d_e(3) call.

       If the underlying BIO is nnoonn--bblloocckkiinngg, _S_S_L___r_e_a_d_(_) will also return when
       the underlying BIO could not satisfy the needs of _S_S_L___r_e_a_d_(_) to con-
       tinue the operation. In this case a call to _S_S_L___g_e_t___e_r_r_o_r(3) with the
       return value of _S_S_L___r_e_a_d_(_) will yield SSSSLL__EERRRROORR__WWAANNTT__RREEAADD or
       SSSSLL__EERRRROORR__WWAANNTT__WWRRIITTEE. As at any time a re-negotiation is possible, a
       call to _S_S_L___r_e_a_d_(_) can also cause write operations! The calling process
       then must repeat the call after taking appropriate action to satisfy
       the needs of _S_S_L___r_e_a_d_(_). The action depends on the underlying BIO. When
       using a non-blocking socket, nothing is to be done, but _s_e_l_e_c_t_(_) can be
       used to check for the required condition. When using a buffering BIO,
       like a BIO pair, data must be written into or retrieved out of the BIO
       before being able to continue.

       _S_S_L___p_e_n_d_i_n_g(3) can be used to find out whether there are buffered bytes
       available for immediate retrieval. In this case _S_S_L___r_e_a_d_(_) can be
       called without blocking or actually receiving new data from the under-
       lying socket.

WWAARRNNIINNGG
       When an _S_S_L___r_e_a_d_(_) operation has to be repeated because of
       SSSSLL__EERRRROORR__WWAANNTT__RREEAADD or SSSSLL__EERRRROORR__WWAANNTT__WWRRIITTEE, it must be repeated with
       the same arguments.

RREETTUURRNN VVAALLUUEESS
       The following return values can occur:

       >0  The read operation was successful; the return value is the number
           of bytes actually read from the TLS/SSL connection.

       0   The read operation was not successful. The reason may either be a
           clean shutdown due to a "close notify" alert sent by the peer (in
           which case the SSL_RECEIVED_SHUTDOWN flag in the ssl shutdown state
           is set (see _S_S_L___s_h_u_t_d_o_w_n(3), _S_S_L___s_e_t___s_h_u_t_d_o_w_n(3)). It is also pos-
           sible, that the peer simply shut down the underlying transport and
           the shutdown is incomplete. Call _S_S_L___g_e_t___e_r_r_o_r_(_) with the return
           value rreett to find out, whether an error occurred or the connection
           was shut down cleanly (SSL_ERROR_ZERO_RETURN).

           SSLv2 (deprecated) does not support a shutdown alert protocol, so
           it can only be detected, whether the underlying connection was
           closed. It cannot be checked, whether the closure was initiated by
           the peer or by something else.

       <0  The read operation was not successful, because either an error
           occurred or action must be taken by the calling process. Call
           _S_S_L___g_e_t___e_r_r_o_r_(_) with the return value rreett to find out the reason.

SSEEEE AALLSSOO
       _S_S_L___g_e_t___e_r_r_o_r(3), _S_S_L___w_r_i_t_e(3), _S_S_L___C_T_X___s_e_t___m_o_d_e(3), _S_S_L___C_T_X___n_e_w(3),
       _S_S_L___c_o_n_n_e_c_t(3), _S_S_L___a_c_c_e_p_t(3) _S_S_L___s_e_t___c_o_n_n_e_c_t___s_t_a_t_e(3), _S_S_L___p_e_n_d_i_n_g(3),
       _S_S_L___s_h_u_t_d_o_w_n(3), _S_S_L___s_e_t___s_h_u_t_d_o_w_n(3), _s_s_l(3), _b_i_o(3)



1.0.0g                            2008-08-01                       SSL_read(3)
