lhash(3)                            OpenSSL                           lhash(3)



NNAAMMEE
       lh_new, lh_free, lh_insert, lh_delete, lh_retrieve, lh_doall,
       lh_doall_arg, lh_error - dynamic hash table

SSYYNNOOPPSSIISS
        #include <openssl/lhash.h>

        DECLARE_LHASH_OF(<type>);

        LHASH *lh_<type>_new();
        void lh_<type>_free(LHASH_OF(<type> *table);

        <type> *lh_<type>_insert(LHASH_OF(<type> *table, <type> *data);
        <type> *lh_<type>_delete(LHASH_OF(<type> *table, <type> *data);
        <type> *lh_retrieve(LHASH_OF<type> *table, <type> *data);

        void lh_<type>_doall(LHASH_OF(<type> *table, LHASH_DOALL_FN_TYPE func);
        void lh_<type>_doall_arg(LHASH_OF(<type> *table, LHASH_DOALL_ARG_FN_TYPE func,
                 <type2>, <type2> *arg);

        int lh_<type>_error(LHASH_OF(<type> *table);

        typedef int (*LHASH_COMP_FN_TYPE)(const void *, const void *);
        typedef unsigned long (*LHASH_HASH_FN_TYPE)(const void *);
        typedef void (*LHASH_DOALL_FN_TYPE)(const void *);
        typedef void (*LHASH_DOALL_ARG_FN_TYPE)(const void *, const void *);

DDEESSCCRRIIPPTTIIOONN
       This library implements type-checked dynamic hash tables. The hash ta-
       ble entries can be arbitrary structures. Usually they consist of key
       and value fields.

       lh_<type>___n_e_w_(_) creates a new LLHHAASSHH__OOFF((<<ttyyppee> structure to store arbi-
       trary data entries, and provides the 'hash' and 'compare' callbacks to
       be used in organising the table's entries.  The hhaasshh callback takes a
       pointer to a table entry as its argument and returns an unsigned long
       hash value for its key field.  The hash value is normally truncated to
       a power of 2, so make sure that your hash function returns well mixed
       low order bits.  The ccoommppaarree callback takes two arguments (pointers to
       two hash table entries), and returns 0 if their keys are equal, non-
       zero otherwise.  If your hash table will contain items of some particu-
       lar type and the hhaasshh and ccoommppaarree callbacks hash/compare these types,
       then the DDEECCLLAARREE__LLHHAASSHH__HHAASSHH__FFNN and IIMMPPLLEEMMEENNTT__LLHHAASSHH__CCOOMMPP__FFNN macros can
       be used to create callback wrappers of the prototypes required by
       lh_<type>___n_e_w_(_).  These provide per-variable casts before calling the
       type-specific callbacks written by the application author.  These
       macros, as well as those used for the "doall" callbacks, are defined
       as;

        #define DECLARE_LHASH_HASH_FN(name, o_type) \
                unsigned long name##_LHASH_HASH(const void *);
        #define IMPLEMENT_LHASH_HASH_FN(name, o_type) \
                unsigned long name##_LHASH_HASH(const void *arg) { \
                        const o_type *a = arg; \
                        return name##_hash(a); }
        #define LHASH_HASH_FN(name) name##_LHASH_HASH

        #define DECLARE_LHASH_COMP_FN(name, o_type) \
                int name##_LHASH_COMP(const void *, const void *);
        #define IMPLEMENT_LHASH_COMP_FN(name, o_type) \
                int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
                        const o_type *a = arg1;                    \
                        const o_type *b = arg2; \
                        return name##_cmp(a,b); }
        #define LHASH_COMP_FN(name) name##_LHASH_COMP

        #define DECLARE_LHASH_DOALL_FN(name, o_type) \
                void name##_LHASH_DOALL(void *);
        #define IMPLEMENT_LHASH_DOALL_FN(name, o_type) \
                void name##_LHASH_DOALL(void *arg) { \
                        o_type *a = arg; \
                        name##_doall(a); }
        #define LHASH_DOALL_FN(name) name##_LHASH_DOALL

        #define DECLARE_LHASH_DOALL_ARG_FN(name, o_type, a_type) \
                void name##_LHASH_DOALL_ARG(void *, void *);
        #define IMPLEMENT_LHASH_DOALL_ARG_FN(name, o_type, a_type) \
                void name##_LHASH_DOALL_ARG(void *arg1, void *arg2) { \
                        o_type *a = arg1; \
                        a_type *b = arg2; \
                        name##_doall_arg(a, b); }
        #define LHASH_DOALL_ARG_FN(name) name##_LHASH_DOALL_ARG

        An example of a hash table storing (pointers to) structures of type 'STUFF'
        could be defined as follows;

        /* Calculates the hash value of 'tohash' (implemented elsewhere) */
        unsigned long STUFF_hash(const STUFF *tohash);
        /* Orders 'arg1' and 'arg2' (implemented elsewhere) */
        int stuff_cmp(const STUFF *arg1, const STUFF *arg2);
        /* Create the type-safe wrapper functions for use in the LHASH internals */
        static IMPLEMENT_LHASH_HASH_FN(stuff, STUFF);
        static IMPLEMENT_LHASH_COMP_FN(stuff, STUFF);
        /* ... */
        int main(int argc, char *argv[]) {
                /* Create the new hash table using the hash/compare wrappers */
                LHASH_OF(STUFF) *hashtable = lh_STUFF_new(LHASH_HASH_FN(STUFF_hash),
                                          LHASH_COMP_FN(STUFF_cmp));
                /* ... */
        }

       lh_<type>___f_r_e_e_(_) frees the LLHHAASSHH__OOFF((<<ttyyppee> structure ttaabbllee. Allocated
       hash table entries will not be freed; consider using lh_<type>___d_o_a_l_l_(_)
       to deallocate any remaining entries in the hash table (see below).

       lh_<type>___i_n_s_e_r_t_(_) inserts the structure pointed to by ddaattaa into ttaabbllee.
       If there already is an entry with the same key, the old value is
       replaced. Note that lh_<type>___i_n_s_e_r_t_(_) stores pointers, the data are
       not copied.

       lh_<type>___d_e_l_e_t_e_(_) deletes an entry from ttaabbllee.

       lh_<type>___r_e_t_r_i_e_v_e_(_) looks up an entry in ttaabbllee. Normally, ddaattaa is a
       structure with the key field(s) set; the function will return a pointer
       to a fully populated structure.

       lh_<type>___d_o_a_l_l_(_) will, for every entry in the hash table, call ffuunncc
       with the data item as its parameter.  For lh_<type>___d_o_a_l_l_(_) and
       lh_<type>___d_o_a_l_l___a_r_g_(_), function pointer casting should be avoided in
       the callbacks (see NNOOTTEE) - instead use the declare/implement macros to
       create type-checked wrappers that cast variables prior to calling your
       type-specific callbacks.  An example of this is illustrated here where
       the callback is used to cleanup resources for items in the hash table
       prior to the hashtable itself being deallocated:

        /* Cleans up resources belonging to 'a' (this is implemented elsewhere) */
        void STUFF_cleanup_doall(STUFF *a);
        /* Implement a prototype-compatible wrapper for "STUFF_cleanup" */
        IMPLEMENT_LHASH_DOALL_FN(STUFF_cleanup, STUFF)
                /* ... then later in the code ... */
        /* So to run "STUFF_cleanup" against all items in a hash table ... */
        lh_STUFF_doall(hashtable, LHASH_DOALL_FN(STUFF_cleanup));
        /* Then the hash table itself can be deallocated */
        lh_STUFF_free(hashtable);

       When doing this, be careful if you delete entries from the hash table
       in your callbacks: the table may decrease in size, moving the item that
       you are currently on down lower in the hash table - this could cause
       some entries to be skipped during the iteration.  The second best solu-
       tion to this problem is to set hash->down_load=0 before you start
       (which will stop the hash table ever decreasing in size).  The best
       solution is probably to avoid deleting items from the hash table inside
       a "doall" callback!

       lh_<type>___d_o_a_l_l___a_r_g_(_) is the same as lh_<type>___d_o_a_l_l_(_) except that ffuunncc
       will be called with aarrgg as the second argument and ffuunncc should be of
       type LLHHAASSHH__DDOOAALLLL__AARRGG__FFNN__TTYYPPEE (a callback prototype that is passed both
       the table entry and an extra argument).  As with _l_h___d_o_a_l_l_(_), you can
       instead choose to declare your callback with a prototype matching the
       types you are dealing with and use the declare/implement macros to cre-
       ate compatible wrappers that cast variables before calling your type-
       specific callbacks.  An example of this is demonstrated here (printing
       all hash table entries to a BIO that is provided by the caller):

        /* Prints item 'a' to 'output_bio' (this is implemented elsewhere) */
        void STUFF_print_doall_arg(const STUFF *a, BIO *output_bio);
        /* Implement a prototype-compatible wrapper for "STUFF_print" */
        static IMPLEMENT_LHASH_DOALL_ARG_FN(STUFF, const STUFF, BIO)
                /* ... then later in the code ... */
        /* Print out the entire hashtable to a particular BIO */
        lh_STUFF_doall_arg(hashtable, LHASH_DOALL_ARG_FN(STUFF_print), BIO,
                           logging_bio);

       lh_<type>___e_r_r_o_r_(_) can be used to determine if an error occurred in the
       last operation. lh_<type>___e_r_r_o_r_(_) is a macro.

RREETTUURRNN VVAALLUUEESS
       lh_<type>___n_e_w_(_) returns NNUULLLL on error, otherwise a pointer to the new
       LLHHAASSHH structure.

       When a hash table entry is replaced, lh_<type>___i_n_s_e_r_t_(_) returns the
       value being replaced. NNUULLLL is returned on normal operation and on
       error.

       lh_<type>___d_e_l_e_t_e_(_) returns the entry being deleted.  NNUULLLL is returned
       if there is no such value in the hash table.

       lh_<type>___r_e_t_r_i_e_v_e_(_) returns the hash table entry if it has been found,
       NNUULLLL otherwise.

       lh_<type>___e_r_r_o_r_(_) returns 1 if an error occurred in the last operation,
       0 otherwise.

       lh_<type>___f_r_e_e_(_), lh_<type>___d_o_a_l_l_(_) and lh_<type>___d_o_a_l_l___a_r_g_(_) return no
       values.

NNOOTTEE
       The various LHASH macros and callback types exist to make it possible
       to write type-checked code without resorting to function-prototype
       casting - an evil that makes application code much harder to audit/ver-
       ify and also opens the window of opportunity for stack corruption and
       other hard-to-find bugs.  It also, apparently, violates ANSI-C.

       The LHASH code regards table entries as constant data.  As such, it
       internally represents _l_h___i_n_s_e_r_t_(_)'d items with a "const void *" pointer
       type.  This is why callbacks such as those used by _l_h___d_o_a_l_l_(_) and
       _l_h___d_o_a_l_l___a_r_g_(_) declare their prototypes with "const", even for the
       parameters that pass back the table items' data pointers - for consis-
       tency, user-provided data is "const" at all times as far as the LHASH
       code is concerned.  However, as callers are themselves providing these
       pointers, they can choose whether they too should be treating all such
       parameters as constant.

       As an example, a hash table may be maintained by code that, for reasons
       of encapsulation, has only "const" access to the data being indexed in
       the hash table (ie. it is returned as "const" from elsewhere in their
       code) - in this case the LHASH prototypes are appropriate as-is.  Con-
       versely, if the caller is responsible for the life-time of the data in
       question, then they may well wish to make modifications to table item
       passed back in the _l_h___d_o_a_l_l_(_) or _l_h___d_o_a_l_l___a_r_g_(_) callbacks (see the
       "STUFF_cleanup" example above).  If so, the caller can either cast the
       "const" away (if they're providing the raw callbacks themselves) or use
       the macros to declare/implement the wrapper functions without "const"
       types.

       Callers that only have "const" access to data they're indexing in a ta-
       ble, yet declare callbacks without constant types (or cast the "const"
       away themselves), are therefore creating their own risks/bugs without
       being encouraged to do so by the API.  On a related note, those audit-
       ing code should pay special attention to any instances of
       DECLARE/IMPLEMENT_LHASH_DOALL_[ARG_]_FN macros that provide types with-
       out any "const" qualifiers.

BBUUGGSS
       lh_<type>___i_n_s_e_r_t_(_) returns NNUULLLL both for success and error.

IINNTTEERRNNAALLSS
       The following description is based on the SSLeay documentation:

       The llhhaasshh library implements a hash table described in the _C_o_m_m_u_n_i_c_a_-
       _t_i_o_n_s _o_f _t_h_e _A_C_M in 1991.  What makes this hash table different is that
       as the table fills, the hash table is increased (or decreased) in size
       via _O_P_E_N_S_S_L___r_e_a_l_l_o_c_(_).  When a 'resize' is done, instead of all hashes
       being redistributed over twice as many 'buckets', one bucket is split.
       So when an 'expand' is done, there is only a minimal cost to redis-
       tribute some values.  Subsequent inserts will cause more single
       'bucket' redistributions but there will never be a sudden large cost
       due to redistributing all the 'buckets'.

       The state for a particular hash table is kept in the LLHHAASSHH structure.
       The decision to increase or decrease the hash table size is made
       depending on the 'load' of the hash table.  The load is the number of
       items in the hash table divided by the size of the hash table.  The
       default values are as follows.  If (hash->up_load < load) => expand.
       if (hash->down_load > load) => contract.  The uupp__llooaadd has a default
       value of 1 and ddoowwnn__llooaadd has a default value of 2.  These numbers can
       be modified by the application by just playing with the uupp__llooaadd and
       ddoowwnn__llooaadd variables.  The 'load' is kept in a form which is multiplied
       by 256.  So hash->up_load=8*256; will cause a load of 8 to be set.

       If you are interested in performance the field to watch is
       num_comp_calls.  The hash library keeps track of the 'hash' value for
       each item so when a lookup is done, the 'hashes' are compared, if there
       is a match, then a full compare is done, and hash->num_comp_calls is
       incremented.  If num_comp_calls is not equal to num_delete plus
       num_retrieve it means that your hash function is generating hashes that
       are the same for different values.  It is probably worth changing your
       hash function if this is the case because even if your hash table has
       10 items in a 'bucket', it can be searched with 10 uunnssiiggnneedd lloonngg com-
       pares and 10 linked list traverses.  This will be much less expensive
       that 10 calls to your compare function.

       _l_h___s_t_r_h_a_s_h_(_) is a demo string hashing function:

        unsigned long lh_strhash(const char *c);

       Since the LLHHAASSHH routines would normally be passed structures, this rou-
       tine would not normally be passed to lh_<type>___n_e_w_(_), rather it would
       be used in the function passed to lh_<type>___n_e_w_(_).

SSEEEE AALLSSOO
       _l_h___s_t_a_t_s(3)

HHIISSTTOORRYY
       The llhhaasshh library is available in all versions of SSLeay and OpenSSL.
       _l_h___e_r_r_o_r_(_) was added in SSLeay 0.9.1b.

       This manpage is derived from the SSLeay documentation.

       In OpenSSL 0.9.7, all lhash functions that were passed function point-
       ers were changed for better type safety, and the function types
       LHASH_COMP_FN_TYPE, LHASH_HASH_FN_TYPE, LHASH_DOALL_FN_TYPE and
       LHASH_DOALL_ARG_FN_TYPE became available.

       In OpenSSL 1.0.0, the lhash interface was revamped for even better type
       checking.



1.0.0g                            2009-10-01                          lhash(3)
