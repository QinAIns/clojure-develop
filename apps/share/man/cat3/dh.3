dh(3)                               OpenSSL                              dh(3)



NNAAMMEE
       dh - Diffie-Hellman key agreement

SSYYNNOOPPSSIISS
        #include <openssl/dh.h>
        #include <openssl/engine.h>

        DH *   DH_new(void);
        void   DH_free(DH *dh);

        int    DH_size(const DH *dh);

        DH *   DH_generate_parameters(int prime_len, int generator,
                       void (*callback)(int, int, void *), void *cb_arg);
        int    DH_check(const DH *dh, int *codes);

        int    DH_generate_key(DH *dh);
        int    DH_compute_key(unsigned char *key, BIGNUM *pub_key, DH *dh);

        void DH_set_default_method(const DH_METHOD *meth);
        const DH_METHOD *DH_get_default_method(void);
        int DH_set_method(DH *dh, const DH_METHOD *meth);
        DH *DH_new_method(ENGINE *engine);
        const DH_METHOD *DH_OpenSSL(void);

        int DH_get_ex_new_index(long argl, char *argp, int (*new_func)(),
                    int (*dup_func)(), void (*free_func)());
        int DH_set_ex_data(DH *d, int idx, char *arg);
        char *DH_get_ex_data(DH *d, int idx);

        DH *   d2i_DHparams(DH **a, unsigned char **pp, long length);
        int    i2d_DHparams(const DH *a, unsigned char **pp);

        int    DHparams_print_fp(FILE *fp, const DH *x);
        int    DHparams_print(BIO *bp, const DH *x);

DDEESSCCRRIIPPTTIIOONN
       These functions implement the Diffie-Hellman key agreement protocol.
       The generation of shared DH parameters is described in _D_H___g_e_n_e_r_-
       _a_t_e___p_a_r_a_m_e_t_e_r_s(3); _D_H___g_e_n_e_r_a_t_e___k_e_y(3) describes how to perform a key
       agreement.

       The DDHH structure consists of several BIGNUM components.

        struct
               {
               BIGNUM *p;              // prime number (shared)
               BIGNUM *g;              // generator of Z_p (shared)
               BIGNUM *priv_key;       // private DH value x
               BIGNUM *pub_key;        // public DH value g^x
               // ...
               };
        DH

       Note that DH keys may use non-standard DDHH__MMEETTHHOODD implementations,
       either directly or by the use of EENNGGIINNEE modules. In some cases (eg. an
       ENGINE providing support for hardware-embedded keys), these BIGNUM val-
       ues will not be used by the implementation or may be used for alterna-
       tive data storage. For this reason, applications should generally avoid
       using DH structure elements directly and instead use API functions to
       query or modify keys.

SSEEEE AALLSSOO
       _d_h_p_a_r_a_m(1), _b_n(3), _d_s_a(3), _e_r_r(3), _r_a_n_d(3), _r_s_a(3), _e_n_g_i_n_e(3),
       _D_H___s_e_t___m_e_t_h_o_d(3), _D_H___n_e_w(3), _D_H___g_e_t___e_x___n_e_w___i_n_d_e_x(3), _D_H___g_e_n_e_r_a_t_e___p_a_r_a_m_-
       _e_t_e_r_s(3), _D_H___c_o_m_p_u_t_e___k_e_y(3), _d_2_i___D_H_p_a_r_a_m_s(3), _R_S_A___p_r_i_n_t(3)



1.0.0g                            2002-08-05                             dh(3)
