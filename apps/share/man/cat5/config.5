CONFIG(5)                           OpenSSL                          CONFIG(5)



NNAAMMEE
       config - OpenSSL CONF library configuration files

DDEESSCCRRIIPPTTIIOONN
       The OpenSSL CONF library can be used to read configuration files.  It
       is used for the OpenSSL master configuration file ooppeennssssll..ccnnff and in a
       few other places like SSPPKKAACC files and certificate extension files for
       the xx550099 utility. OpenSSL applications can also use the CONF library
       for their own purposes.

       A configuration file is divided into a number of sections. Each section
       starts with a line [[ sseeccttiioonn__nnaammee ]] and ends when a new section is
       started or end of file is reached. A section name can consist of
       alphanumeric characters and underscores.

       The first section of a configuration file is special and is referred to
       as the ddeeffaauulltt section this is usually unnamed and is from the start of
       file until the first named section. When a name is being looked up it
       is first looked up in a named section (if any) and then the default
       section.

       The environment is mapped onto a section called EENNVV.

       Comments can be included by preceding them with the ## character

       Each section in a configuration file consists of a number of name and
       value pairs of the form nnaammee==vvaalluuee

       The nnaammee string can contain any alphanumeric characters as well as a
       few punctuation symbols such as .. ,, ;; and __.

       The vvaalluuee string consists of the string following the == character until
       end of line with any leading and trailing white space removed.

       The value string undergoes variable expansion. This can be done by
       including the form $$vvaarr or $${{vvaarr}}: this will substitute the value of
       the named variable in the current section. It is also possible to sub-
       stitute a value from another section using the syntax $$sseeccttiioonn::::nnaammee or
       $${{sseeccttiioonn::::nnaammee}}. By using the form $$EENNVV::::nnaammee environment variables
       can be substituted. It is also possible to assign values to environment
       variables by using the name EENNVV::::nnaammee, this will work if the program
       looks up environment variables using the CCOONNFF library instead of call-
       ing _gg_ee_tt_ee_nn_vv_((_)) directly.

       It is possible to escape certain characters by using any kind of quote
       or the \\ character. By making the last character of a line a \\ a vvaalluuee
       string can be spread across multiple lines. In addition the sequences
       \\nn, \\rr, \\bb and \\tt are recognized.

OOPPEENNSSSSLL LLIIBBRRAARRYY CCOONNFFIIGGUURRAATTIIOONN
       In OpenSSL 0.9.7 and later applications can automatically configure
       certain aspects of OpenSSL using the master OpenSSL configuration file,
       or optionally an alternative configuration file. The ooppeennssssll utility
       includes this functionality: any sub command uses the master OpenSSL
       configuration file unless an option is used in the sub command to use
       an alternative configuration file.

       To enable library configuration the default section needs to contain an
       appropriate line which points to the main configuration section. The
       default name is ooppeennssssll__ccoonnff which is used by the ooppeennssssll utility.
       Other applications may use an alternative name such as mmyyaapppplliiccaa--
       ttoonn__ccoonnff.

       The configuration section should consist of a set of name value pairs
       which contain specific module configuration information. The nnaammee rep-
       resents the name of the _c_o_n_f_i_g_u_r_a_t_i_o_n _m_o_d_u_l_e the meaning of the vvaalluuee
       is module specific: it may, for example, represent a further configura-
       tion section containing configuration module specific information. E.g.

        openssl_conf = openssl_init

        [openssl_init]

        oid_section = new_oids
        engines = engine_section

        [new_oids]

        ... new oids here ...

        [engine_section]

        ... engine stuff here ...

       Currently there are two configuration modules. One for ASN1 objects
       another for ENGINE configuration.

       AASSNN11 OOBBJJEECCTT CCOONNFFIIGGUURRAATTIIOONN MMOODDUULLEE

       This module has the name ooiidd__sseeccttiioonn. The value of this variable points
       to a section containing name value pairs of OIDs: the name is the OID
       short and long name, the value is the numerical form of the OID.
       Although some of the ooppeennssssll utility sub commands already have their
       own ASN1 OBJECT section functionality not all do. By using the ASN1
       OBJECT configuration module aallll the ooppeennssssll utility sub commands can
       see the new objects as well as any compliant applications. For example:

        [new_oids]

        some_new_oid = 1.2.3.4
        some_other_oid = 1.2.3.5

       In OpenSSL 0.9.8 it is also possible to set the value to the long name
       followed by a comma and the numerical OID form. For example:

        shortName = some object long name, 1.2.3.4

       EENNGGIINNEE CCOONNFFIIGGUURRAATTIIOONN MMOODDUULLEE

       This ENGINE configuration module has the name eennggiinneess. The value of
       this variable points to a section containing further ENGINE configura-
       tion information.

       The section pointed to by eennggiinneess is a table of engine names (though
       see eennggiinnee__iidd below) and further sections containing configuration
       informations specific to each ENGINE.

       Each ENGINE specific section is used to set default algorithms, load
       dynamic, perform initialization and send ctrls. The actual operation
       performed depends on the _c_o_m_m_a_n_d name which is the name of the name
       value pair. The currently supported commands are listed below.

       For example:

        [engine_section]

        # Configure ENGINE named "foo"
        foo = foo_section
        # Configure ENGINE named "bar"
        bar = bar_section

        [foo_section]
        ... foo ENGINE specific commands ...

        [bar_section]
        ... "bar" ENGINE specific commands ...

       The command eennggiinnee__iidd is used to give the ENGINE name. If used this
       command must be first. For example:

        [engine_section]
        # This would normally handle an ENGINE named "foo"
        foo = foo_section

        [foo_section]
        # Override default name and use "myfoo" instead.
        engine_id = myfoo

       The command ddyynnaammiicc__ppaatthh loads and adds an ENGINE from the given path.
       It is equivalent to sending the ctrls SSOO__PPAATTHH with the path argument
       followed by LLIISSTT__AADDDD with value 2 and LLOOAADD to the dynamic ENGINE. If
       this is not the required behaviour then alternative ctrls can be sent
       directly to the dynamic ENGINE using ctrl commands.

       The command iinniitt determines whether to initialize the ENGINE. If the
       value is 00 the ENGINE will not be initialized, if 11 and attempt it made
       to initialized the ENGINE immediately. If the iinniitt command is not
       present then an attempt will be made to initialize the ENGINE after all
       commands in its section have been processed.

       The command ddeeffaauulltt__aallggoorriitthhmmss sets the default algorithms an ENGINE
       will supply using the functions _EE_NN_GG_II_NN_EE____ss_ee_tt____dd_ee_ff_aa_uu_ll_tt____ss_tt_rr_ii_nn_gg_((_))

       If the name matches none of the above command names it is assumed to be
       a ctrl command which is sent to the ENGINE. The value of the command is
       the argument to the ctrl command. If the value is the string EEMMPPTTYY then
       no value is sent to the command.

       For example:

        [engine_section]

        # Configure ENGINE named "foo"
        foo = foo_section

        [foo_section]
        # Load engine from DSO
        dynamic_path = /some/path/fooengine.so
        # A foo specific ctrl.
        some_ctrl = some_value
        # Another ctrl that doesn't take a value.
        other_ctrl = EMPTY
        # Supply all default algorithms
        default_algorithms = ALL

NNOOTTEESS
       If a configuration file attempts to expand a variable that doesn't
       exist then an error is flagged and the file will not load. This can
       happen if an attempt is made to expand an environment variable that
       doesn't exist. For example in a previous version of OpenSSL the default
       OpenSSL master configuration file used the value of HHOOMMEE which may not
       be defined on non Unix systems and would cause an error.

       This can be worked around by including a ddeeffaauulltt section to provide a
       default value: then if the environment lookup fails the default value
       will be used instead. For this to work properly the default value must
       be defined earlier in the configuration file than the expansion. See
       the EEXXAAMMPPLLEESS section for an example of how to do this.

       If the same variable exists in the same section then all but the last
       value will be silently ignored. In certain circumstances such as with
       DNs the same field may occur multiple times. This is usually worked
       around by ignoring any characters before an initial .. e.g.

        1.OU="My first OU"
        2.OU="My Second OU"

EEXXAAMMPPLLEESS
       Here is a sample configuration file using some of the features men-
       tioned above.

        # This is the default section.

        HOME=/temp
        RANDFILE= ${ENV::HOME}/.rnd
        configdir=$ENV::HOME/config

        [ section_one ]

        # We are now in section one.

        # Quotes permit leading and trailing whitespace
        any = " any variable name "

        other = A string that can \
        cover several lines \
        by including \\ characters

        message = Hello World\n

        [ section_two ]

        greeting = $section_one::message

       This next example shows how to expand environment variables safely.

       Suppose you want a variable called ttmmppffiillee to refer to a temporary
       filename. The directory it is placed in can determined by the the TTEEMMPP
       or TTMMPP environment variables but they may not be set to any value at
       all. If you just include the environment variable names and the vari-
       able doesn't exist then this will cause an error when an attempt is
       made to load the configuration file. By making use of the default sec-
       tion both values can be looked up with TTEEMMPP taking priority and //ttmmpp
       used if neither is defined:

        TMP=/tmp
        # The above value is used if TMP isn't in the environment
        TEMP=$ENV::TMP
        # The above value is used if TEMP isn't in the environment
        tmpfile=${ENV::TEMP}/tmp.filename

BBUUGGSS
       Currently there is no way to include characters using the octal \\nnnnnn
       form. Strings are all null terminated so nulls cannot form part of the
       value.

       The escaping isn't quite right: if you want to use sequences like \\nn
       you can't use any quote escaping on the same line.

       Files are loaded in a single pass. This means that an variable expan-
       sion will only work if the variables referenced are defined earlier in
       the file.

SSEEEE AALLSSOO
       _x_5_0_9(1), _r_e_q(1), _c_a(1)



1.0.0g                            2004-11-25                         CONFIG(5)
