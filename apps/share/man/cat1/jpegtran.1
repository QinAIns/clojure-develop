JPEGTRAN(1)                                                        JPEGTRAN(1)



NNAAMMEE
       jpegtran - lossless transformation of JPEG files

SSYYNNOOPPSSIISS
       jjppeeggttrraann [ _o_p_t_i_o_n_s ] [ _f_i_l_e_n_a_m_e ]

DDEESSCCRRIIPPTTIIOONN
       jjppeeggttrraann performs various useful transformations of JPEG files.  It can
       translate the coded representation from one variant of JPEG to another,
       for  example  from baseline JPEG to progressive JPEG or vice versa.  It
       can also perform some rearrangements of the  image  data,  for  example
       turning an image from landscape to portrait format by rotation.

       jjppeeggttrraann  works  by rearranging the compressed data (DCT coefficients),
       without ever fully decoding the image.  Therefore, its  transformations
       are  lossless: there is no image degradation at all, which would not be
       true if you used ddjjppeegg followed by ccjjppeegg to accomplish the same conver-
       sion.   But by the same token, jjppeeggttrraann cannot perform lossy operations
       such as changing the image quality.

       jjppeeggttrraann reads the named JPEG/JFIF file, or the standard  input  if  no
       file is named, and produces a JPEG/JFIF file on the standard output.

OOPPTTIIOONNSS
       All  switch  names  may  be  abbreviated; for example, --ooppttiimmiizzee may be
       written --oopptt or --oo.  Upper and  lower  case  are  equivalent.   British
       spellings are also accepted (e.g., --ooppttiimmiissee), though for brevity these
       are not mentioned below.

       To specify the coded JPEG representation used in the output file, jjppeegg--
       ttrraann accepts a subset of the switches recognized by ccjjppeegg:

       --ooppttiimmiizzee
              Perform optimization of entropy encoding parameters.

       --pprrooggrreessssiivvee
              Create progressive JPEG file.

       --rreessttaarrtt _N
              Emit  a  JPEG  restart  marker  every N MCU rows, or every N MCU
              blocks if "B" is attached to the number.

       --aarriitthhmmeettiicc
              Use arithmetic coding.

       --ssccaannss _f_i_l_e
              Use the scan script given in the specified text file.

       See ccjjppeegg(1) for more details about these  switches.   If  you  specify
       none of these switches, you get a plain baseline-JPEG output file.  The
       quality setting and so forth are determined by the input file.

       The image  can  be  losslessly  transformed  by  giving  one  of  these
       switches:

       --fflliipp hhoorriizzoonnttaall
              Mirror image horizontally (left-right).

       --fflliipp vveerrttiiccaall
              Mirror image vertically (top-bottom).

       --rroottaattee 9900
              Rotate image 90 degrees clockwise.

       --rroottaattee 118800
              Rotate image 180 degrees.

       --rroottaattee 227700
              Rotate image 270 degrees clockwise (or 90 ccw).

       --ttrraannssppoossee
              Transpose image (across UL-to-LR axis).

       --ttrraannssvveerrssee
              Transverse transpose (across UR-to-LL axis).

              The transpose transformation has no restrictions regarding image
              dimensions.  The other transformations operate rather  oddly  if
              the  image  dimensions are not a multiple of the iMCU size (usu-
              ally 8 or 16 pixels), because they can only  transform  complete
              blocks of DCT coefficient data in the desired way.

              jjppeeggttrraann's  default behavior when transforming an odd-size image
              is designed to preserve  exact  reversibility  and  mathematical
              consistency  of the transformation set.  As stated, transpose is
              able to flip the entire image area.  Horizontal mirroring leaves
              any partial iMCU column at the right edge untouched, but is able
              to flip all rows of the image.   Similarly,  vertical  mirroring
              leaves any partial iMCU row at the bottom edge untouched, but is
              able to flip all columns.  The other transforms can be built  up
              as  sequences of transpose and flip operations; for consistency,
              their actions on edge pixels are defined to be the same  as  the
              end result of the corresponding transpose-and-flip sequence.

              For practical use, you may prefer to discard any untransformable
              edge pixels rather than having a strange-looking strip along the
              right  and/or  bottom edges of a transformed image.  To do this,
              add the --ttrriimm switch:

       --ttrriimm  Drop non-transformable edge blocks.

              Obviously, a transformation with --ttrriimm  is  not  reversible,  so
              strictly  speaking  jjppeeggttrraann  with  this switch is not lossless.
              Also, the expected mathematical equivalences between the  trans-
              formations  no  longer  hold.  For example, --rroott 227700 --ttrriimm trims
              only the bottom edge, but --rroott 9900 --ttrriimm  followed  by  --rroott  118800
              --ttrriimm trims both edges.

              If  you  are  only interested in perfect transformation, add the
              --ppeerrffeecctt switch:

       --ppeerrffeecctt
              Fails with an error if the transformation is not perfect.

              For example you may want to do

              ((jjppeeggttrraann --rroott 9900 --ppeerrffeecctt _f_o_o_._j_p_g |||| ddjjppeegg  _f_o_o_._j_p_g  ||  ppnnmmfflliipp
              --rr9900 || ccjjppeegg))

              to  do a perfect rotation if available or an approximated one if
              not.

       We also offer a lossless-crop option, which  discards  data  outside  a
       given  image  region but losslessly preserves what is inside.  Like the
       rotate and flip transforms, lossless crop is restricted by the  current
       JPEG  format: the upper left corner of the selected region must fall on
       an iMCU boundary.  If this does not hold for the given crop parameters,
       we  silently  move  the upper left corner up and/or left to make it so,
       simultaneously increasing the region dimensions to keep the lower right
       crop  corner  unchanged.   (Thus,  the output image covers at least the
       requested region, but may cover more.)  The adjustment  of  the  region
       dimensions may be optionally disabled.

       The image can be losslessly cropped by giving the switch:

       --ccrroopp WWxxHH++XX++YY
              Crop  to  a rectangular subarea of width W, height H starting at
              point X,Y.

       A complementary lossless-wipe option is provided to discard (gray  out)
       data  inside  a  given image region while losslessly preserving what is
       outside:

       --wwiippee WWxxHH++XX++YY
              Wipe (gray out) a rectangular  subarea  of  width  W,  height  H
              starting at point X,Y.

       Other not-strictly-lossless transformation switches are:

       --ggrraayyssccaallee
              Force grayscale output.

              This option discards the chrominance channels if the input image
              is YCbCr (ie, a standard color JPEG), resulting in  a  grayscale
              JPEG  file.  The luminance channel is preserved exactly, so this
              is a better method of reducing to grayscale than  decompression,
              conversion,  and  recompression.   This  switch  is particularly
              handy for  fixing  a  monochrome  picture  that  was  mistakenly
              encoded  as  a  color  JPEG.  (In such a case, the space savings
              from getting rid of the  near-empty  chroma  channels  won't  be
              large;  but  the  decoding time for a grayscale JPEG is substan-
              tially less than that for a color JPEG.)

       --ssccaallee _M_/_N
              Scale the output image by a factor M/N.

              Currently supported scale factors are M/N with all M from  1  to
              16,  where  N  is  the  source DCT size, which is 8 for baseline
              JPEG.  If the /N part is  omitted,  then  M  specifies  the  DCT
              scaled size to be applied on the given input.  For baseline JPEG
              this is equivalent to M/8 scaling, since the source DCT size for
              baseline  JPEG  is  8.   CCaauuttiioonn::  An implementation of the JPEG
              SmartScale extension is required for this  feature.   SmartScale
              enabled  JPEG  is  not  yet widely implemented, so many decoders
              will be unable to view a SmartScale extended JPEG file at all.

       jjppeeggttrraann also recognizes these switches that control what  to  do  with
       "extra" markers, such as comment blocks:

       --ccooppyy nnoonnee
              Copy no extra markers from source file.  This setting suppresses
              all comments and other excess  baggage  present  in  the  source
              file.

       --ccooppyy ccoommmmeennttss
              Copy  only  comment  markers.  This setting copies comments from
              the source file, but discards any other inessential  (for  image
              display) data.

       --ccooppyy aallll
              Copy  all  extra  markers.  This setting preserves miscellaneous
              markers found in the source file, such as JFIF thumbnails,  Exif
              data, and Photoshop settings.  In some files these extra markers
              can be sizable.

              The default behavior is --ccooppyy ccoommmmeennttss.  (Note: in IJG  releases
              v6 and v6a, jjppeeggttrraann always did the equivalent of --ccooppyy nnoonnee.)

       Additional switches recognized by jpegtran are:

       --mmaaxxmmeemmoorryy _N
              Set  limit  for  amount  of  memory  to  use in processing large
              images.  Value is in thousands of bytes, or millions of bytes if
              "M"  is  attached  to  the number.  For example, --mmaaxx 44mm selects
              4000000 bytes.  If more space is needed, temporary files will be
              used.

       --oouuttffiillee _n_a_m_e
              Send output image to the named file, not to standard output.

       --vveerrbboossee
              Enable  debug printout.  More --vv's give more output.  Also, ver-
              sion information is printed at startup.

       --ddeebbuugg Same as --vveerrbboossee.

EEXXAAMMPPLLEESS
       This example converts a baseline JPEG file to progressive form:

              jjppeeggttrraann --pprrooggrreessssiivvee _f_o_o_._j_p_g >> _f_o_o_p_r_o_g_._j_p_g

       This example rotates an image  90  degrees  clockwise,  discarding  any
       unrotatable edge pixels:

              jjppeeggttrraann --rroott 9900 --ttrriimm _f_o_o_._j_p_g >> _f_o_o_9_0_._j_p_g

EENNVVIIRROONNMMEENNTT
       JJPPEEGGMMEEMM
              If  this  environment  variable is set, its value is the default
              memory limit.  The value  is  specified  as  described  for  the
              --mmaaxxmmeemmoorryy  switch.   JJPPEEGGMMEEMM overrides the default value speci-
              fied when the program was compiled, and itself is overridden  by
              an explicit --mmaaxxmmeemmoorryy.

SSEEEE AALLSSOO
       ccjjppeegg(1), ddjjppeegg(1), rrddjjppggccoomm(1), wwrrjjppggccoomm(1)
       Wallace,  Gregory  K.   "The  JPEG Still Picture Compression Standard",
       Communications of the ACM, April 1991 (vol. 34, no. 4), pp. 30-44.

AAUUTTHHOORR
       Independent JPEG Group

BBUUGGSS
       The transform options can't transform odd-size images  perfectly.   Use
       --ttrriimm or --ppeerrffeecctt if you don't like the results.

       The  entire  image is read into memory and then written out again, even
       in cases where this isn't really necessary.  Expect swapping  on  large
       images, especially when using the more complex transform options.



                               13 September 2013                   JPEGTRAN(1)
