S_CLIENT(1)                         OpenSSL                        S_CLIENT(1)



NNAAMMEE
       s_client - SSL/TLS client program

SSYYNNOOPPSSIISS
       ooppeennssssll ss__cclliieenntt [--ccoonnnneecctt hhoosstt::ppoorrtt] [--vveerriiffyy ddeepptthh] [--cceerrtt ffiilleennaammee]
       [--cceerrttffoorrmm DDEERR||PPEEMM] [--kkeeyy ffiilleennaammee] [--kkeeyyffoorrmm DDEERR||PPEEMM] [--ppaassss aarrgg]
       [--CCAAppaatthh ddiirreeccttoorryy] [--CCAAffiillee ffiilleennaammee] [--rreeccoonnnneecctt] [--ppaauussee]
       [--sshhoowwcceerrttss] [--ddeebbuugg] [--mmssgg] [--nnbbiioo__tteesstt] [--ssttaattee] [--nnbbiioo] [--ccrrllff]
       [--iiggnn__eeooff] [--qquuiieett] [--ssssll22] [--ssssll33] [--ttllss11] [--nnoo__ssssll22] [--nnoo__ssssll33]
       [--nnoo__ttllss11] [--bbuuggss] [--cciipphheerr cciipphheerrlliisstt] [--ssttaarrttttllss pprroottooccooll] [--eennggiinnee
       iidd] [--ttllsseexxttddeebbuugg] [--nnoo__ttiicckkeett] [--sseessss__oouutt ffiilleennaammee] [--sseessss__iinn ffiillee--
       nnaammee] [--rraanndd ffiillee((ss))]

DDEESSCCRRIIPPTTIIOONN
       The ss__cclliieenntt command implements a generic SSL/TLS client which connects
       to a remote host using SSL/TLS. It is a _v_e_r_y useful diagnostic tool for
       SSL servers.

OOPPTTIIOONNSS
       --ccoonnnneecctt hhoosstt::ppoorrtt
           This specifies the host and optional port to connect to. If not
           specified then an attempt is made to connect to the local host on
           port 4433.

       --cceerrtt cceerrttnnaammee
           The certificate to use, if one is requested by the server. The
           default is not to use a certificate.

       --cceerrttffoorrmm ffoorrmmaatt
           The certificate format to use: DER or PEM. PEM is the default.

       --kkeeyy kkeeyyffiillee
           The private key to use. If not specified then the certificate file
           will be used.

       --kkeeyyffoorrmm ffoorrmmaatt
           The private format to use: DER or PEM. PEM is the default.

       --ppaassss aarrgg
           the private key password source. For more information about the
           format of aarrgg see the PPAASSSS PPHHRRAASSEE AARRGGUUMMEENNTTSS section in _o_p_e_n_s_s_l(1).

       --vveerriiffyy ddeepptthh
           The verify depth to use. This specifies the maximum length of the
           server certificate chain and turns on server certificate verifica-
           tion.  Currently the verify operation continues after errors so all
           the problems with a certificate chain can be seen. As a side effect
           the connection will never fail due to a server certificate verify
           failure.

       --CCAAppaatthh ddiirreeccttoorryy
           The directory to use for server certificate verification. This
           directory must be in "hash format", see vveerriiffyy for more informa-
           tion. These are also used when building the client certificate
           chain.

       --CCAAffiillee ffiillee
           A file containing trusted certificates to use during server authen-
           tication and to use when attempting to build the client certificate
           chain.

       --ppuurrppoossee,, --iiggnnoorree__ccrriittiiccaall,, --iissssuueerr__cchheecckkss,, --ccrrll__cchheecckk,, --ccrrll__cchheecckk__aallll,,
       --ppoolliiccyy__cchheecckk,, --eexxtteennddeedd__ccrrll,, --xx550099__ssttrriicctt,, --ppoolliiccyy --cchheecckk__ssss__ssiigg
           Set various certificate chain valiadition option. See the vveerriiffyy
           manual page for details.

       --rreeccoonnnneecctt
           reconnects to the same server 5 times using the same session ID,
           this can be used as a test that session caching is working.

       --ppaauussee
           pauses 1 second between each read and write call.

       --sshhoowwcceerrttss
           display the whole server certificate chain: normally only the
           server certificate itself is displayed.

       --pprreexxiitt
           print session information when the program exits. This will always
           attempt to print out information even if the connection fails. Nor-
           mally information will only be printed out once if the connection
           succeeds. This option is useful because the cipher in use may be
           renegotiated or the connection may fail because a client certifi-
           cate is required or is requested only after an attempt is made to
           access a certain URL. Note: the output produced by this option is
           not always accurate because a connection might never have been
           established.

       --ssttaattee
           prints out the SSL session states.

       --ddeebbuugg
           print extensive debugging information including a hex dump of all
           traffic.

       --mmssgg
           show all protocol messages with hex dump.

       --nnbbiioo__tteesstt
           tests non-blocking I/O

       --nnbbiioo
           turns on non-blocking I/O

       --ccrrllff
           this option translated a line feed from the terminal into CR+LF as
           required by some servers.

       --iiggnn__eeooff
           inhibit shutting down the connection when end of file is reached in
           the input.

       --qquuiieett
           inhibit printing of session and certificate information.  This
           implicitly turns on --iiggnn__eeooff as well.

       --ppsskk__iiddeennttiittyy iiddeennttiittyy
           Use the PSK identity iiddeennttiittyy when using a PSK cipher suite.

       --ppsskk kkeeyy
           Use the PSK key kkeeyy when using a PSK cipher suite. The key is given
           as a hexadecimal number without leading 0x, for example -psk
           1a2b3c4d.

       --ssssll22, --ssssll33, --ttllss11, --nnoo__ssssll22, --nnoo__ssssll33, --nnoo__ttllss11
           these options disable the use of certain SSL or TLS protocols. By
           default the initial handshake uses a method which should be compat-
           ible with all servers and permit them to use SSL v3, SSL v2 or TLS
           as appropriate.

           Unfortunately there are a lot of ancient and broken servers in use
           which cannot handle this technique and will fail to connect. Some
           servers only work if TLS is turned off with the --nnoo__ttllss option oth-
           ers will only support SSL v2 and may need the --ssssll22 option.

       --bbuuggss
           there are several known bug in SSL and TLS implementations. Adding
           this option enables various workarounds.

       --cciipphheerr cciipphheerrlliisstt
           this allows the cipher list sent by the client to be modified.
           Although the server determines which cipher suite is used it should
           take the first supported cipher in the list sent by the client. See
           the cciipphheerrss command for more information.

       --ssttaarrttttllss pprroottooccooll
           send the protocol-specific message(s) to switch to TLS for communi-
           cation.  pprroottooccooll is a keyword for the intended protocol.  Cur-
           rently, the only supported keywords are "smtp", "pop3", "imap", and
           "ftp".

       --ttllsseexxttddeebbuugg
           print out a hex dump of any TLS extensions received from the
           server.

       --nnoo__ttiicckkeett
           disable RFC4507bis session ticket support.

       --sseessss__oouutt ffiilleennaammee
           output SSL session to ffiilleennaammee

       --sseessss__iinn sseessss..ppeemm
           load SSL session from ffiilleennaammee. The client will attempt to resume a
           connection from this session.

       --eennggiinnee iidd
           specifying an engine (by its unique iidd string) will cause ss__cclliieenntt
           to attempt to obtain a functional reference to the specified
           engine, thus initialising it if needed. The engine will then be set
           as the default for all available algorithms.

       --rraanndd ffiillee((ss))
           a file or files containing random data used to seed the random num-
           ber generator, or an EGD socket (see _R_A_N_D___e_g_d(3)).  Multiple files
           can be specified separated by a OS-dependent character.  The sepa-
           rator is ;; for MS-Windows, ,, for OpenVMS, and :: for all others.

CCOONNNNEECCTTEEDD CCOOMMMMAANNDDSS
       If a connection is established with an SSL server then any data
       received from the server is displayed and any key presses will be sent
       to the server. When used interactively (which means neither --qquuiieett nor
       --iiggnn__eeooff have been given), the session will be renegotiated if the line
       begins with an RR, and if the line begins with a QQ or if end of file is
       reached, the connection will be closed down.

NNOOTTEESS
       ss__cclliieenntt can be used to debug SSL servers. To connect to an SSL HTTP
       server the command:

        openssl s_client -connect servername:443

       would typically be used (https uses port 443). If the connection suc-
       ceeds then an HTTP command can be given such as "GET /" to retrieve a
       web page.

       If the handshake fails then there are several possible causes, if it is
       nothing obvious like no client certificate then the --bbuuggss, --ssssll22,
       --ssssll33, --ttllss11, --nnoo__ssssll22, --nnoo__ssssll33, --nnoo__ttllss11 options can be tried in case
       it is a buggy server. In particular you should play with these options
       bbeeffoorree submitting a bug report to an OpenSSL mailing list.

       A frequent problem when attempting to get client certificates working
       is that a web client complains it has no certificates or gives an empty
       list to choose from. This is normally because the server is not sending
       the clients certificate authority in its "acceptable CA list" when it
       requests a certificate. By using ss__cclliieenntt the CA list can be viewed and
       checked. However some servers only request client authentication after
       a specific URL is requested. To obtain the list in this case it is nec-
       essary to use the --pprreexxiitt option and send an HTTP request for an appro-
       priate page.

       If a certificate is specified on the command line using the --cceerrtt
       option it will not be used unless the server specifically requests a
       client certificate. Therefor merely including a client certificate on
       the command line is no guarantee that the certificate works.

       If there are problems verifying a server certificate then the
       --sshhoowwcceerrttss option can be used to show the whole chain.

       Since the SSLv23 client hello cannot include compression methods or
       extensions these will only be supported if its use is disabled, for
       example by using the --nnoo__ssssllvv22 option.

BBUUGGSS
       Because this program has a lot of options and also because some of the
       techniques used are rather old, the C source of s_client is rather hard
       to read and not a model of how things should be done. A typical SSL
       client program would be much simpler.

       The --vveerriiffyy option should really exit if the server verification fails.

       The --pprreexxiitt option is a bit of a hack. We should really report informa-
       tion whenever a session is renegotiated.

SSEEEE AALLSSOO
       _s_e_s_s___i_d(1), _s___s_e_r_v_e_r(1), _c_i_p_h_e_r_s(1)



1.0.0g                            2009-06-26                       S_CLIENT(1)
