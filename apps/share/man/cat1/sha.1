DGST(1)                             OpenSSL                            DGST(1)



NNAAMMEE
       dgst, md5, md4, md2, sha1, sha, mdc2, ripemd160 - message digests

SSYYNNOOPPSSIISS
       ooppeennssssll ddggsstt [--mmdd55||--mmdd44||--mmdd22||--sshhaa11||--sshhaa||--mmddcc22||--rriippeemmdd116600||--ddssss11] [--cc]
       [--dd] [--hheexx] [--bbiinnaarryy] [--oouutt ffiilleennaammee] [--ssiiggnn ffiilleennaammee] [--kkeeyyffoorrmm aarrgg]
       [--ppaassssiinn aarrgg] [--vveerriiffyy ffiilleennaammee] [--pprrvveerriiffyy ffiilleennaammee] [--ssiiggnnaattuurree ffiillee--
       nnaammee] [--hhmmaacc kkeeyy] [ffiillee......]

       [mmdd55||mmdd44||mmdd22||sshhaa11||sshhaa||mmddcc22||rriippeemmdd116600] [--cc] [--dd] [ffiillee......]

DDEESSCCRRIIPPTTIIOONN
       The digest functions output the message digest of a supplied file or
       files in hexadecimal form. They can also be used for digital signing
       and verification.

OOPPTTIIOONNSS
       --cc  print out the digest in two digit groups separated by colons, only
           relevant if hheexx format output is used.

       --dd  print out BIO debugging information.

       --hheexx
           digest is to be output as a hex dump. This is the default case for
           a "normal" digest as opposed to a digital signature.

       --bbiinnaarryy
           output the digest or signature in binary form.

       --oouutt ffiilleennaammee
           filename to output to, or standard output by default.

       --ssiiggnn ffiilleennaammee
           digitally sign the digest using the private key in "filename".

       --kkeeyyffoorrmm aarrgg
           Specifies the key format to sign digest with. Only PEM and ENGINE
           formats are supported by the ddggsstt command.

       --eennggiinnee iidd
           Use engine iidd for operations (including private key storage).  This
           engine is not used as source for digest algorithms, unless it is
           also specified in the configuration file.

       --ssiiggoopptt nnmm::vv
           Pass options to the signature algorithm during sign or verify oper-
           ations.  Names and values of these options are algorithm-specific.

       --ppaassssiinn aarrgg
           the private key password source. For more information about the
           format of aarrgg see the PPAASSSS PPHHRRAASSEE AARRGGUUMMEENNTTSS section in _o_p_e_n_s_s_l(1).

       --vveerriiffyy ffiilleennaammee
           verify the signature using the the public key in "filename".  The
           output is either "Verification OK" or "Verification Failure".

       --pprrvveerriiffyy ffiilleennaammee
           verify the signature using the  the private key in "filename".

       --ssiiggnnaattuurree ffiilleennaammee
           the actual signature to verify.

       --hhmmaacc kkeeyy
           create a hashed MAC using "key".

       --mmaacc aallgg
           create MAC (keyed Message Authentication Code). The most popular
           MAC algorithm is HMAC (hash-based MAC), but there are other MAC
           algorithms which are not based on hash, for instance ggoosstt--mmaacc algo-
           rithm, supported by ccccggoosstt engine. MAC keys and other options
           should be set via --mmaaccoopptt parameter.

       --mmaaccoopptt nnmm::vv
           Passes options to MAC algorithm, specified by --mmaacc key.  Following
           options are supported by both by HHMMAACC and ggoosstt--mmaacc:

           kkeeyy::ssttrriinngg
                   Specifies MAC key as alphnumeric string (use if key contain
                   printable characters only). String length must conform to
                   any restrictions of the MAC algorithm for example exactly
                   32 chars for gost-mac.

           hheexxkkeeyy::ssttrriinngg
                   Specifies MAC key in hexadecimal form (two hex digits per
                   byte).  Key length must conform to any restrictions of the
                   MAC algorithm for example exactly 32 chars for gost-mac.

       --rraanndd ffiillee((ss))
           a file or files containing random data used to seed the random num-
           ber generator, or an EGD socket (see _R_A_N_D___e_g_d(3)).  Multiple files
           can be specified separated by a OS-dependent character.  The sepa-
           rator is ;; for MS-Windows, ,, for OpenVMS, and :: for all others.

       ffiillee......
           file or files to digest. If no files are specified then standard
           input is used.

NNOOTTEESS
       The digest of choice for all new applications is SHA1. Other digests
       are however still widely used.

       If you wish to sign or verify data using the DSA algorithm then the
       dss1 digest must be used.

       A source of random numbers is required for certain signing algorithms,
       in particular DSA.

       The signing and verify options should only be used if a single file is
       being signed or verified.



1.0.0g                            2009-04-10                           DGST(1)
